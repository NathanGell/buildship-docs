[
  {
    "output": {
      "buildship": {},
      "description": "A Readable stream of the output file.",
      "title": "File Output Stream",
      "type": "string"
    },
    "inputs": {
      "type": "object",
      "required": ["mimetype", "apiKey", "fileId"],
      "properties": {
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API key to use for authentication.",
          "title": "API Key",
          "type": "string"
        },
        "fileId": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The ID of the file to fetch from OpenAI Storage.",
          "title": "File ID",
          "type": "string"
        }
      }
    },
    "meta": {
      "name": "Fetch OpenAI File",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Generates a readable stream for a file stored in OpenAI Storage. Return this stream using a 'Return' node to receive it through an API endpoint (to download the file, write it to the file system, etc.)",
      "id": "fetch-openai-file"
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "openai": "4.31.0", "stream": "0.0.2" },
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "category": ["Integrations"],
    "live": true,
    "syncIndex": {
      "ranBy": "nithin@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1712232370, "_nanoseconds": 111000000 }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832978, "_nanoseconds": 479000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "integrity": "v3:a46b828b3451eb7f92d095eab0df3a7e",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/fetch-openai-file/2.1.0/build.cjs",
    "id": "fetch-openai-file",
    "_libRef": {
      "integrity": "v3:30b25d499f18eb6b0593550913063bcd",
      "libNodeRefId": "@buildship/fetch-openai-file",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/fetch-openai-file/2.0.0/build.cjs",
      "version": "2.0.0"
    },
    "version": "2.1.0",
    "script": "import { Readable } from 'stream';\nimport OpenAI from 'openai';\n\nexport default async ({ apiKey, fileId }: NodeInputs,{ logging }: NodeScriptOptions) : NodeOutput  => {\n  const openai = new OpenAI({ apiKey });\n  const file = await openai.files.content(fileId);\n  const buffer = Buffer.from(await file.arrayBuffer());\n  return Readable.from(buffer);\n}\n",
    "failCount": 5,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 46000000 },
    "usageCounter": 191
  },
  {
    "output": {
      "buildship": { "index": 0 },
      "description": "The Assistant Response object. It's likely that the entire object will not be of much use as a whole.\n\nFor example, you may want to return just the 'Response Stream' property to have your workflow return a streamed response.\n\nThe 'Thread ID', on the other hand, may be used separately (for example, by setting it as a response header for the client to receive and store during the conversation).",
      "title": "Assistant Response",
      "type": "object",
      "properties": {
        "threadId": {
          "buildship": { "index": 1 },
          "description": "The thread ID of the active Assistant thread.",
          "title": "Thread ID",
          "type": "string"
        },
        "stream": {
          "buildship": { "index": 0 },
          "description": "The streamed response generated by the Assistant. Meant to be returned via the 'Return' node to allow the client to receive the response in the form of a stream.",
          "title": "Response Stream",
          "type": "string"
        }
      }
    },
    "subType": "assistant",
    "_createdBy": {
      "displayName": "Save to Library",
      "timestamp": { "_seconds": 1713956615, "_nanoseconds": 695000000 }
    },
    "type": "script",
    "integrations": [],
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "category": ["Integrations"],
    "inputs": {
      "type": "object",
      "properties": {
        "threadId": {
          "buildship": { "index": 4 },
          "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
          "title": "Thread ID",
          "type": "string"
        },
        "instructions": {
          "buildship": { "index": 2 },
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": "string",
          "title": "Instructions"
        },
        "assistantId": {
          "buildship": { "index": 1, "sensitive": true },
          "pattern": "",
          "description": "The ID of the assistant to use. You need to create the assistant in the OpenAI console.",
          "title": "Assistant ID",
          "type": "string"
        },
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API key to use for authentication.",
          "title": "API Key",
          "type": "string"
        },
        "builtInTools": {
          "buildship": {
            "options": [
              { "label": "File Search", "value": "file_search" },
              { "label": "Code Interpreter", "value": "code_interpreter" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "Select the OpenAI assistant built-in tools to use.",
          "title": "Built-in Tools",
          "type": "array",
          "enum": ["file_search", "code_interpreter"]
        },
        "prompt": {
          "buildship": { "index": 3 },
          "description": "The prompt to send to the assistant as user message.",
          "type": "string",
          "title": "User Prompt"
        }
      },
      "required": ["prompt", "apiKey", "assistantId"]
    },
    "dependencies": { "openai": "4.38.5", "stream": "0.0.2" },
    "live": true,
    "_updatedBy": {
      "uid": "MaOU55qJrCR2SxHeWrVyoDZ3g363",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/ACg8ocIJXcQfkIikQgd3EjzzJZGoBj3mnKA3WevuxI8hhCEB=s96-c",
      "updatedField": "syncIndex",
      "displayName": "Vishnu Nithin Reddy",
      "email": "nithin@rowy.io.rowy",
      "timestamp": { "_seconds": 1714482665, "_nanoseconds": 445000000 }
    },
    "syncIndex": {
      "ranBy": "nithin@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1714482665, "_nanoseconds": 482000000 }
    },
    "meta": {
      "name": "OpenAI Assistant (Stream Response)",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Add different script nodes and let the AI Assistant automatically choose which to execute based on the input. The node returns a streamed text response (meant to be returned back to the client) and the thread ID (to track the conversation). Built to work with OpenAI Assistants API.",
      "id": "openai-assistant-node-stream-response"
    },
    "integrity": "v3:c649dab4d9b3c43a36fc9693c5e42733",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-assistant-node-stream-response/2.1.0/build.cjs",
    "id": "openai-assistant-node-stream-response",
    "version": "2.1.0",
    "_libRef": {
      "integrity": "v3:223f6e6f55dce4347c7e30c128594ec2",
      "libNodeRefId": "@buildship/openai-assistant-node-stream-response",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-assistant-node-stream-response/2.0.1/build.cjs",
      "version": "2.0.1"
    },
    "script": "import OpenAI from \"openai\";\nimport { Readable } from \"stream\";\n\nfunction nodeToOpenAiFunction(node) {\n  return {\n    name: node.label,\n    description: node.meta.description ?? \"\",\n    parameters: sanitiseSchema(node.inputs),\n  };\n}\n\nfunction sanitiseSchema(schema) {\n  const sanitizedSchema = { ...schema };\n  for (const key of Object.keys(sanitizedSchema)) {\n    if (\n      sanitizedSchema[key].buildship &&\n      !sanitizedSchema[key].buildship.toBeAutoFilled\n    ) {\n      sanitizedSchema[key].description =\n        \"This value is prefilled, you can't change it, so you should skip it.\";\n    }\n    delete sanitizedSchema[key].buildship;\n  }\n  return sanitizedSchema;\n}\n\nexport default async function assistant(\n  { assistantId, threadId, apiKey, prompt, builtInTools, instructions }: NodeInputs,\n  { req, logging, execute, nodes }\n: NodeScriptOptions) : NodeOutput  {\n  req.type = \"text/plain\";\n\n  // Supplementary functions\n  const executeToolCall = async (toolCall) => {\n    let args;\n    try {\n      args = JSON.parse(toolCall.function.arguments);\n    } catch (err) {\n      logging.log(\n        `Couldn't parse function arguments. Received: ${toolCall.function.arguments}`\n      );\n      throw new Error(\n        `Couldn't parse function arguments. Received: ${toolCall.function.arguments}`\n      );\n    }\n    logging.log(args);\n    const output = await execute(toolCall.function.name, args);\n\n    logging.log(`Executed ${toolCall.function.name} with output:`, output);\n\n    return {\n      tool_call_id: toolCall.id,\n      output: output ? JSON.stringify(output) : \"\",\n    };\n  };\n\n  const tools =\n    nodes?.map((n) => {\n      return {\n        type: \"function\",\n        function: nodeToOpenAiFunction(n),\n      };\n    }) ?? [];\n  if ((builtInTools ?? []).includes(\"file_search\")) {\n    tools.push({ type: \"file_search\" });\n  }\n  if ((builtInTools ?? []).includes(\"code_interpreter\")) {\n    tools.push({ type: \"code_interpreter\" });\n  }\n\n  const openai = new OpenAI({ apiKey });\n\n  if (prompt === undefined) {\n    logging.log(\"User Prompt is undefined.\");\n    throw new Error(\"User Prompt is undefined.\");\n  }\n\n  const handleStream = (runStream, stream) => {\n    const checkForToolCall = async () => {\n      const run = runStream.currentRun();\n      if (run?.status !== \"requires_action\") {\n        stream.push(null);\n        return;\n      }\n      stream.push(\"\\n\");\n\n      const toolOutputs = await Promise.all(\n        run.required_action?.submit_tool_outputs.tool_calls.map(\n          executeToolCall\n        ) ?? []\n      );\n\n      const newToolStream = openai.beta.threads.runs.submitToolOutputsStream(\n        run.thread_id,\n        run.id,\n        { tool_outputs: toolOutputs }\n      );\n      logging.log(\"New stream has begun: \", newToolStream.currentRun()?.id);\n      handleStream(newToolStream, stream);\n    };\n\n    runStream\n      .on(\"textDelta\", (delta, acc) => {\n        stream.push(delta.value);\n      })\n      .on(\"end\", () => {\n        logging.log(runStream.currentRun()?.id + \"'s stream has ended.\");\n        checkForToolCall();\n      })\n      .on(\"error\", (err) => {\n        logging.log(\n          runStream.currentRun()?.id +\n            \"'s stream has errored out:\" +\n            JSON.stringify(err)\n        );\n        stream.push(null);\n      });\n  };\n\n  // Add the user prompt first\n  if (!threadId) {\n    threadId = (\n      await openai.beta.threads.create({\n        messages: [{ role: \"user\", content: prompt }],\n      })\n    ).id;\n    logging.log(\"New thread:\", threadId);\n  } else {\n    await openai.beta.threads.messages.create(threadId, {\n      role: \"user\",\n      content: prompt,\n    });\n  }\n\n  const assistantStream = openai.beta.threads.runs.stream(threadId, {\n    assistant_id: assistantId,\n    instructions,\n    tools,\n  });\n\n  let stream = new Readable();\n  stream._read = function () {};\n  handleStream(assistantStream, stream);\n  return { stream: stream, threadId: threadId };\n}\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 208,
    "usageCounter": 705
  },
  {
    "inputs": {
      "type": "object",
      "required": ["apiKey", "assistantId", "prompt"],
      "properties": {
        "threadId": {
          "buildship": { "index": 4 },
          "description": "The ID of the conversation thread to use. If not specified, a new thread will be created.",
          "title": "Thread ID",
          "type": "string"
        },
        "assistantId": {
          "buildship": { "index": 1 },
          "description": "The ID of the assistant to use. You need to create the assistant in the OpenAI console.",
          "title": "Assistant ID",
          "type": "string"
        },
        "instructions": {
          "buildship": { "index": 2 },
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "title": "Instructions",
          "type": "string"
        },
        "apiKey": {
          "buildship": { "index": 0 },
          "description": "The OpenAI API key to use for authentication.",
          "title": "API Key",
          "type": "string"
        },
        "builtInTools": {
          "buildship": {
            "options": [
              { "label": "File Search", "value": "file_search" },
              { "label": "Code Interpreter", "value": "code_interpreter" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "Select the OpenAI assistant built-in tools to use.",
          "title": "Built-in Tools",
          "type": "array",
          "enum": ["file_search", "code_interpreter"]
        },
        "prompt": {
          "buildship": { "index": 3 },
          "description": "The prompt to send to the assistant as user message.",
          "title": "User Prompt",
          "type": "string"
        }
      }
    },
    "subType": "assistant",
    "_createdBy": {
      "displayName": "Save to Library",
      "timestamp": { "_seconds": 1714405147, "_nanoseconds": 670000000 }
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "openai": "4.38.5", "timers": "0.1.1" },
    "live": true,
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "category": ["Integrations"],
    "syncIndex": {
      "ranBy": "nithin@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1714405687, "_nanoseconds": 206000000 }
    },
    "output": {
      "buildship": { "index": 0 },
      "description": "",
      "type": "object",
      "title": "Assistant Response",
      "properties": {
        "threadId": {
          "buildship": { "index": 1 },
          "description": "The thread ID that this message belongs to.",
          "title": "Thread ID",
          "type": "string"
        },
        "response": {
          "buildship": { "index": 2 },
          "description": "Response to the user prompt",
          "type": "string",
          "title": "Response"
        },
        "messages": {
          "buildship": { "index": 0 },
          "description": "The content of the message in array of text and/or images.",
          "type": "array",
          "title": "List of Messages"
        },
        "annotations": {
          "buildship": { "index": 3 },
          "description": "The annotations of the message",
          "title": "Annotations",
          "type": "array"
        }
      }
    },
    "meta": {
      "name": "OpenAI Assistant",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Add different script nodes and let the AI Assistant automatically choose which to execute based on the input. Built to work with OpenAI Assistants API V2.",
      "id": "openai-assistant-v2-node"
    },
    "id": "openai-assistant-v2-node",
    "_libRef": {
      "integrity": "v3:f5d380d8f36e9d2b84900ec25fb97c46",
      "libNodeRefId": "@buildship/openai-assistant-v2-node",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-assistant-v2-node/3.0.6/build.cjs",
      "version": "3.0.6"
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/ACg8ocIJXcQfkIikQgd3EjzzJZGoBj3mnKA3WevuxI8hhCEB=s96-c",
      "uid": "SlYfftUcxlOtxa1tIoCeFCgWtkW2",
      "displayName": "Vishnu Nithin Reddy",
      "email": "nithin@rowy.io.rowy",
      "timestamp": { "_seconds": 1717149667, "_nanoseconds": 835000000 }
    },
    "integrity": "v3:fa917813e15b7eb20a9f2b20851f99e6",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-assistant-v2-node/3.1.1/build.cjs",
    "version": "3.1.1",
    "script": "import OpenAI from \"openai\";\nimport { setTimeout } from \"timers/promises\";\n\n\nfunction nodeToOpenAiFunction(\n  node\n) {\n  return {\n    name: node.label,\n    description: node.meta.description ?? \"\",\n    parameters: sanitiseSchema(node.inputs),\n  };\n}\n\nfunction sanitiseSchema(schema) {\n  const sanitizedSchema = {...schema}\n  for (const key of Object.keys(sanitizedSchema)) {\n    if(sanitizedSchema[key].buildship && !sanitizedSchema[key].buildship.toBeAutoFilled){\n      sanitizedSchema[key].description = \"this value is prefilled, you cant change it, so you should skip it\"\n    }\n    delete sanitizedSchema[key].buildship\n  }\n  return sanitizedSchema;\n}\n\nexport default async function assistant(\n{ assistantId, threadId, apiKey, prompt, builtInTools=[], instructions }: NodeInputs,\n{ req, logging, execute, nodes }\n: NodeScriptOptions) : NodeOutput  {\n\nconst tools = nodes?.map((n) => {\n  return {\n    type: \"function\",\n    function: nodeToOpenAiFunction(n),\n  };\n}) ?? [];\n\nconst openai = new OpenAI({\n  apiKey,\n});\nlet runResp;\n\nif (prompt === undefined) {\n  logging.log('User Prompt is undefined.')\n  throw new Error('User Prompt is undefined.')\n}\n\nif (threadId) {\n  await openai.beta.threads.messages.create(threadId, {\n    role: \"user\",\n    content: prompt,\n  });\n} else {\n  threadId = (\n    await openai.beta.threads.create({\n      messages: [\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    })\n  ).id;\n  logging.log(\"New thread created with ID:\", threadId);\n}\n\nif (builtInTools.includes(\"file_search\")) {\n  tools.push({ type: \"file_search\" });\n}\n\nif (builtInTools.includes(\"code_interpreter\")) {\n  tools.push({ type: \"code_interpreter\" });\n}\n\nlogging.log(\"List of tools supplied: \", tools);\n\nrunResp = await openai.beta.threads.runs.create(threadId, {\n  assistant_id: assistantId,\n  instructions,\n  tools,\n});\n\nwhile (runResp.status === \"queued\" || runResp.status === \"in_progress\") {\n  runResp = await pollForUpdate(logging, openai, threadId, runResp.id);\n  logging.log(\"Polling complete\", runResp);\n\n  if (\n    runResp.required_action &&\n    runResp.required_action.type === \"submit_tool_outputs\"\n  ) {\n    const toolOutputs = await Promise.all(\n      runResp.required_action.submit_tool_outputs.tool_calls.map(\n        async (toolCall) => {\n          let args;\n          try {\n            args = JSON.parse(toolCall.function.arguments);\n          } catch (err) {\n            logging.log(`Couldn't parse function arguments. Received: ${toolCall.function.arguments}`);\n            throw new Error(`Couldn't parse function arguments. Received: ${toolCall.function.arguments}`)\n          }\n          logging.log(args)\n          logging.log(`Executing ${toolCall.function.name}...`)\n          const output = await execute(toolCall.function.name, args);\n\n          logging.log(\n            `Executed ${toolCall.function.name} with output:`,\n            output\n          );\n\n          return {\n            tool_call_id: toolCall.id,\n            output: output ? JSON.stringify(output) : \"\",\n          };\n        }\n      )\n    );\n\n    runResp = await openai.beta.threads.runs.submitToolOutputs(\n      threadId,\n      runResp.id,\n      {\n        tool_outputs: toolOutputs,\n      }\n    );\n  }\n}\n\nif (runResp.status === 'failed') {\n  return {\n    \"response\": runResp.last_error.message,\n    \"error\": runResp.last_error.code\n  }\n}\n\nconst messages = await openai.beta.threads.messages.list(threadId, {\n  order: \"desc\",\n});\n  logging.log(messages);\nreturn {\n  \"response\": messages.body.data[0].content[0].text?.value,\n  \"annotations\" : messages.body.data[0].content[0].text?.annotations,\n  \"threadId\":threadId,\n  \"messages\":messages.body.data,\n  \"error\": null\n};\n}\n\nasync function pollForUpdate(\nlogging,\nopenai,\nthreadId,\nrunId\n) {\nlet runResp;\n\nwhile (true) {\n  runResp = await openai.beta.threads.runs.retrieve(threadId, runId);\n  if (runResp.status !== \"queued\" && runResp.status !== \"in_progress\") {\n    return runResp;\n  }\n  await setTimeout(1000);\n}\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 4326,
    "usageCounter": 3202
  },
  {
    "output": { "buildship": {}, "description": "The extracted fields", "title": "Results", "type": "array" },
    "inputs": {
      "type": "object",
      "required": ["text", "apiKey", "url", "fields"],
      "properties": {
        "mode": {
          "default": "html",
          "buildship": {
            "options": [
              { "label": "Text", "value": "text" },
              { "label": "HTML", "value": "html" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "Choose the extraction mode to use. The `Text` option provides a concise context but omits web page semantics like URLs. Select `HTML` to preserve HTML semantics during extraction.",
          "title": "Mode",
          "type": "string",
          "enum": ["text", "html"]
        },
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "selector": {
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "Specific HTML selector you want to extract from (by default body will be used).",
          "title": "Selector",
          "type": "string"
        },
        "fields": {
          "default": "",
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "List the field names to extract, separated by commas. For example: `title, price, description`.",
          "title": "Fields",
          "type": "string"
        },
        "url": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The URL for the AI to extract information from.",
          "title": "URL",
          "type": "string"
        }
      }
    },
    "_createdBy": {
      "displayName": "Save to Library",
      "timestamp": { "_seconds": 1716218453, "_nanoseconds": 516000000 }
    },
    "type": "script",
    "integrations": [],
    "dependencies": {
      "@langchain/core": "0.1.58",
      "@langchain/openai": "0.0.28",
      "zod": "3.23.0-canary.20240417T010051"
    },
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "category": ["Integrations"],
    "live": true,
    "syncIndex": {
      "ranBy": "luis@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1716219005, "_nanoseconds": 58000000 }
    },
    "deployToBucket": {
      "ranBy": "luis@rowy.io.rowy",
      "completedAt": { "_seconds": 1716219008, "_nanoseconds": 239000000 }
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716276893, "_nanoseconds": 482000000 }
    },
    "integrity": "v3:a788b4b2165f3d4b23df79f7be0d0a0d",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-extract/2.1.0/build.cjs",
    "meta": {
      "name": "LLM Extract",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Extract structured data from any web page.",
      "id": "openai-extract"
    },
    "id": "openai-extract",
    "version": "2.1.0",
    "_libRef": {
      "integrity": "v3:d5c57b02da075abab31d405328495c71",
      "libNodeRefId": "@buildship/openai-extract",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-extract/2.0.0/build.cjs",
      "version": "2.0.0"
    },
    "script": "import { z } from \"zod\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\n\nexport default async function llmExtract(\n  { apiKey, url, selector, fields, text, mode = \"html\" }: NodeInputs,\n  { logging }\n: NodeScriptOptions) : NodeOutput  {\n  let result;\n\n  if (mode === \"html\") {\n    const response = await fetch(\"https://puppeteer.buildship.run/v1/html\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        url,\n        selector,\n        steps: [],\n      }),\n    });\n    result = await response.json();\n  } else {\n    const response = await fetch(\"https://puppeteer.buildship.run/v1/text\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        url,\n        selector,\n        steps: [],\n      }),\n    });\n    result = await response.text();\n  }\n\n  let extractionText;\n  if (Array.isArray(result)) {\n    extractionText = result[0].replace(/\\s+/g, \" \").trim();\n  } else if (typeof result === \"string\") {\n    extractionText = result.replace(/\\s+/g, \" \").trim();\n  } else {\n    throw new Error(\"Unexpected result format\");\n  }\n\n  // Dynamically create the Zod schema based on the fields string\n  // Split the fields string into an array of field names\n  const fieldNames = fields.split(\",\").map((field) => field.trim());\n  const zodSchema = z.object(\n    fieldNames.reduce((schema, field) => {\n      schema[field] = z.optional(z.string());\n      return schema;\n    }, {})\n  );\n\n  const dataSchema = z.object({\n    items: z.array(zodSchema),\n  });\n\n  const llm = new ChatOpenAI({\n    model: \"gpt-4o\",\n    temperature: 0,\n    apiKey,\n  });\n\n  const SYSTEM_PROMPT_TEMPLATE = `You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.`;\n\n  const prompt = ChatPromptTemplate.fromMessages([\n    [\"system\", SYSTEM_PROMPT_TEMPLATE],\n    // Keep on reading through this use case to see how to use examples to improve performance\n    // MessagesPlaceholder('examples'),\n    [\"human\", \"{text}\"],\n  ]);\n\n  const extractionRunnable = prompt.pipe(llm.withStructuredOutput(dataSchema));\n  const extractionResult = await extractionRunnable.invoke({ text: extractionText });\n\n  return extractionResult.items;\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 10,
    "usageCounter": 78
  },
  {
    "output": {
      "buildship": {},
      "title": "Vector embedding",
      "type": "object",
      "properties": { "properties": { "key": "properties" } }
    },
    "type": "script",
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "dependencies": { "node-fetch": "3.3.2" },
    "inputs": {
      "type": "object",
      "properties": {
        "openaiSecret": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "content": {
          "buildship": { "index": 1 },
          "description": "The content to generate embeddings for",
          "type": "string",
          "title": "Content"
        }
      },
      "required": ["content", "openaiSecret"]
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701544798, "_nanoseconds": 212000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Generate embeddings for a given content using OpenAI text-embedding-ada-002 model",
      "id": "openai-generate-embeddings",
      "name": "Generate Embeddings"
    },
    "t": 302,
    "syncAllAtOnce": "1084",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-generate-embeddings",
    "integrations": [],
    "integrity": "v3:8671007e45fa2c8815bfbf0e370a618e",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-generate-embeddings/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:72420335d6240e3b397e7370548a9d24",
      "libNodeRefId": "@buildship/openai-generate-embeddings",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-generate-embeddings/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "version": "1.1.0",
    "script": "import fetch from 'node-fetch'\nexport default async function generateEmbeddings({ content, openaiSecret }: NodeInputs, { req }: NodeScriptOptions) : NodeOutput  {\n  const resp = await fetch('https://api.openai.com/v1/embeddings', {\n    body: JSON.stringify({\n      input: content,\n      model: 'text-embedding-ada-002'\n    }),\n    headers: {\n      Authorization: 'Bearer ' + openaiSecret,\n      'Content-Type': 'application/json'\n    },\n    method: 'POST'\n  });\n  const embeddings = await resp.json();\n  return embeddings.data[0].embedding;\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "usageCounter": 528,
    "failCount": 14
  },
  {
    "output": {
      "buildship": {},
      "description": "The text generated by the OpenAI GPT API",
      "title": "Generated Text",
      "type": "object",
      "properties": {}
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "openai": "4.18.0" },
    "category": ["Integrations"],
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3&_gl=1*b90bgk*_ga*MjAxOTYxMjk5OS4xNjk0NTIzMjQ2*_ga_CW55HF8NVT*MTY5NjQwMzEyMy4yNS4xLjE2OTY0MDMxNDQuMzkuMC4w"
      },
      "description": "Generates text based on a given user and system prompt and always returns a JSON object using the OpenAI GPT (Turbo) APIs.",
      "id": "openai-gpt-json",
      "name": "JSON Generator"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1708004257, "_nanoseconds": 823000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-gpt-json",
    "_libRef": {
      "integrity": "v3:64581a13c79592ecc31c59fe4f54be64",
      "libNodeRefId": "@buildship/openai-gpt-json",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-gpt-json/1.0.7/build.cjs",
      "version": "1.0.7"
    },
    "script": "import OpenAI from 'openai';\nexport default async function openaiGptTextGenerator({\n    userPrompt,\n    systemPrompt,\n    maxTokens,\n    temperature,\n    apiKey,\n    model,\n}: NodeInputs) : NodeOutput  {\n    const openai = new OpenAI({\n        apiKey\n    });\n    const response = await openai.chat.completions.create({\n        model,\n        messages: [{\n            role: 'system',\n            content: systemPrompt\n        }, {\n            role: 'user',\n            content: userPrompt\n        }],\n        max_tokens: maxTokens,\n        temperature,\n      response_format: { type: \"json_object\" }\n      \n    });\n    const output = response.choices[0].message.content;\n    return JSON.parse(output);\n}",
    "syncIndex": {
      "ranBy": "gaurav@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1716324626, "_nanoseconds": 590000000 }
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtd6hy8km6onbQ0lbGFRExGb6GxHWzSHRDprRufF-x5eTg=s96-c",
      "uid": "yoNAHMYNAMYfhQXSb0uJSURF0NZ2",
      "displayName": "Shams Mosowi",
      "email": "shams@rowy.io.rowy",
      "timestamp": { "_seconds": 1716532530, "_nanoseconds": 40000000 }
    },
    "integrity": "v3:887d0000d0a5bcded87da57b591124aa",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-gpt-json/1.1.2/build.cjs",
    "inputs": {
      "type": "object",
      "required": ["apiKey", "userPrompt", "systemPrompt", "model"],
      "properties": {
        "systemPrompt": {
          "default": "You are a data analyst API capable of sentiment analysis that responds in JSON.  The JSON schema should include:  { }",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The system prompt to generate JSON from.\n\n**When using GPT JSON generator, always instruct the model to produce JSON via the System Prompt.**\n\n**SAMPLE PROMPT**:\n```\nYou are a data analyst API capable of sentiment analysis that responds in JSON.  The JSON schema should include: \n{\n    \"sentiment_analysis\": {\n        \"sentiment\": \"string (positive, negative, neutral)\",\n        \"confidence_score\": \"number (0-1)\"\n   }\n}\n```",
          "title": "System Prompt",
          "type": "string"
        },
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "userPrompt": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The user prompt to generate JSON from.",
          "title": "User Prompt",
          "type": "string"
        },
        "maxTokens": {
          "default": 800,
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The maximum length (in tokens) of the generated JSON.",
          "title": "Max Tokens",
          "type": "number"
        },
        "temperature": {
          "default": 1,
          "buildship": { "index": 4, "sensitive": false },
          "pattern": "",
          "description": "As the temperature approaches zero, the model will become deterministic and repetitive. Higher temperature results in more random completions.\n\n**RANGE: `0 to 1`**",
          "title": "Temperature",
          "type": "number"
        },
        "model": {
          "default": "gpt-4o",
          "buildship": {
            "options": [
              { "label": "gpt-3.5-turbo", "value": "gpt-3.5-turbo-0125" },
              { "label": "gpt-4-turbo", "value": "gpt-4-turbo-preview" },
              { "label": "gpt-4o", "value": "gpt-4o" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "The OpenAI Model to use for performing the JSON Generation.",
          "title": "Model",
          "type": "string",
          "enum": ["gpt-3.5-turbo-0125", "gpt-4-turbo-preview", "gpt-4o"]
        }
      }
    },
    "version": "1.1.2",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 299,
    "usageCounter": 1030
  },
  {
    "output": {
      "buildship": {},
      "description": "The text generated by the OpenAI GPT API",
      "title": "Generated Text",
      "type": "object",
      "properties": {}
    },
    "type": "script",
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "t": 166,
    "syncAllAtOnce": "1071",
    "integrations": [],
    "dependencies": { "openai": "4.18.0" },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-gpt-text-generator",
    "meta": {
      "name": "Text Generator",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3&_gl=1*b90bgk*_ga*MjAxOTYxMjk5OS4xNjk0NTIzMjQ2*_ga_CW55HF8NVT*MTY5NjQwMzEyMy4yNS4xLjE2OTY0MDMxNDQuMzkuMC4w"
      },
      "description": "Generates text based on a given user and system prompt using the OpenAI GPT API",
      "id": "openai-gpt-text-generator"
    },
    "deployToBucket": {
      "ranBy": "harini@rowy.io.rowy",
      "completedAt": { "_seconds": 1715650668, "_nanoseconds": 584000000 }
    },
    "_updatedBy": {
      "uid": "paQsO5OGfaZPhq3mwZMLcKCumon2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AOh14GjPtG-sIpjTwM2LT2_B997-hsGe2hu8PA-Ncz1d=s96-c",
      "updatedField": "syncIndex",
      "displayName": "Harini Janakiraman",
      "email": "harini@rowy.io.rowy",
      "timestamp": { "_seconds": 1715650742, "_nanoseconds": 126000000 }
    },
    "syncIndex": {
      "ranBy": "harini@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1715650742, "_nanoseconds": 136000000 }
    },
    "inputs": {
      "type": "object",
      "properties": {
        "systemPrompt": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The system prompt to generate text from.",
          "title": "System Prompt",
          "type": "string"
        },
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "userPrompt": {
          "buildship": { "index": 1 },
          "description": "The user prompt to generate text from.",
          "title": "User Prompt",
          "type": "string"
        },
        "maxTokens": {
          "default": 200,
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The maximum length (in tokens) of the generated text.",
          "title": "Max Tokens",
          "type": "number"
        },
        "temperature": {
          "default": 0.5,
          "buildship": { "index": 4, "sensitive": false },
          "pattern": "",
          "description": "As the temperature approaches zero, the model will become deterministic and repetitive. Higher temperature results in more random completions.\n\n**RANGE: `0 to 1`**",
          "title": "Temperature",
          "type": "number"
        },
        "model": {
          "default": "gpt-3.5-turbo",
          "buildship": {
            "options": [
              { "label": "gpt-4o", "value": "gpt-4o" },
              { "label": "gpt-4", "value": "gpt-4" },
              { "label": "gpt-3.5-turbo", "value": "gpt-3.5-turbo" },
              { "label": "gpt-4-turbo", "value": "gpt-4-1106-preview" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "The OpenAI Model to use for performing the Text Generation.",
          "title": "Model",
          "type": "string",
          "enum": ["gpt-4o", "gpt-4", "gpt-3.5-turbo", "gpt-4-1106-preview"]
        }
      },
      "required": ["userPrompt", "systemPrompt", "apiKey", "model"]
    },
    "integrity": "v3:c9bfc085878f4b016ffe2c0fd0808349",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-gpt-text-generator/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:7cb31b8fc76e3d49b390c9ebf5685d22",
      "libNodeRefId": "@buildship/openai-gpt-text-generator",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-gpt-text-generator/1.0.4/build.cjs",
      "version": "1.0.4"
    },
    "version": "1.1.0",
    "script": "import OpenAI from 'openai';\nexport default async function openaiGptTextGenerator({\n    userPrompt,\n    systemPrompt,\n    maxTokens,\n    temperature,\n    apiKey,\n  model\n  \n}: NodeInputs) : NodeOutput  {\n    const openai = new OpenAI({\n        apiKey\n    });\n    const response = await openai.chat.completions.create({\n        model,\n        messages: [{\n            role: 'system',\n            content: systemPrompt\n        }, {\n            role: 'user',\n            content: userPrompt\n        }],\n        max_tokens: maxTokens,\n        temperature\n      \n    });\n    return response.choices[0].message.content;\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 3363,
    "usageCounter": 4435
  },
  {
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "output": {
      "buildship": {},
      "description": "The generated image in base64 format",
      "title": "Image",
      "type": "string"
    },
    "_createdBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AGNmyxaoKyi1YHoiusuLWh9sPHGzirW-H-miXcE4eOey=s96-c",
      "uid": "5pCgHZpkCmTSRrtmK9Ld7emLKLJ2",
      "isAnonymous": false,
      "displayName": "Luis Rodge",
      "email": "luis@rowy.io.rowy",
      "timestamp": { "_seconds": 1699413132, "_nanoseconds": 187000000 }
    },
    "live": true,
    "type": "script",
    "dependencies": { "openai": "4.19.0" },
    "inputs": {
      "type": "object",
      "required": ["apiKey", "voice", "model", "input"],
      "properties": {
        "input": {
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The text to be converted to image.",
          "title": "Input Text",
          "type": "string"
        },
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "size": {
          "default": "1024x1024",
          "buildship": {
            "options": [
              { "label": "256x256", "value": "256x256" },
              { "label": "512x512", "value": "512x512" },
              { "label": "1024x1024", "value": "1024x1024" },
              { "label": "1792x1024", "value": "1792x1024" },
              { "label": "1024x1792", "value": "1024x1792" }
            ],
            "index": 3,
            "sensitive": false
          },
          "pattern": "",
          "description": "The size of the generated image. Must be one of 256x256, 512x512, or 1024x1024 for dall-e-2. Or, must be one of 1024x1024, 1792x1024, or 1024x1792 for dall-e-3 models. Defaults to 1024x1024.",
          "title": "Size",
          "type": "string",
          "enum": ["256x256", "512x512", "1024x1024", "1792x1024", "1024x1792"]
        },
        "model": {
          "buildship": {
            "options": [
              { "label": "DALL·E 2", "value": "dall-e-2" },
              { "label": "DALL·E 3", "value": "dall-e-3" }
            ],
            "index": 1,
            "sensitive": false
          },
          "pattern": "",
          "description": "The model to be used for the text to image conversion.",
          "title": "Model",
          "type": "string",
          "enum": ["dall-e-2", "dall-e-3"]
        }
      }
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701544391, "_nanoseconds": 893000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Converts text to Base64 image using OpenAI's DALL·E models.",
      "id": "openai-image-generation",
      "name": "Image Generator"
    },
    "t": 172,
    "syncAllAtOnce": "942",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-image-generation",
    "integrations": [],
    "integrity": "v3:2b733dcbb71a4c24c2ab3485ea915b04",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-image-generation/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:bfff0a2beb814d616dd1bf40d3eb1ce7",
      "libNodeRefId": "@buildship/openai-image-generation",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-image-generation/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "version": "1.1.0",
    "script": "import OpenAI from \"openai\";\n\nexport default async function textToImage({\n    apiKey,\n    model,\n    input,\n    size\n}: NodeInputs) : NodeOutput  {\n  const openai = new OpenAI({\n    apiKey,\n  });\n  const response = await openai.images.generate({\n    model,\n    prompt: input,\n    n: 1,\n    size: size || \"1024x1024\",\n    response_format: \"b64_json\",\n  });\n  return response.data[0].b64_json;\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "failCount": 69,
    "usageCounter": 663
  },
  {
    "output": {
      "buildship": {},
      "description": "The response from the OpenAI GPT-4 Vision model",
      "type": "object",
      "title": "OpenAI Response"
    },
    "type": "script",
    "dependencies": { "openai": "4.19.1" },
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "inputs": {
      "type": "object",
      "required": ["text", "imageUrls", "apiKey", "maxTokens"],
      "properties": {
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "imageUrls": {
          "default": [],
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The array of URLs of the images to be analyzed.",
          "title": "Image URLs",
          "type": "array"
        },
        "maxTokens": {
          "default": 300,
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The maximum number of tokens for the model to generate.",
          "type": "number",
          "title": "Max Tokens"
        },
        "text": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The text description or question about the images",
          "type": "string",
          "title": "Question"
        }
      }
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1700640771, "_nanoseconds": 958000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Analyses multiple images using the OpenAI GPT-4 Vision model.",
      "id": "openai-multi-gpt4-vision",
      "name": "Multi-Image GPT-4 Vision"
    },
    "t": 309,
    "syncAllAtOnce": "978",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-multi-gpt4-vision",
    "integrations": [],
    "integrity": "v3:3ac25f59e5f40a3edeb49967601eff70",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-multi-gpt4-vision/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:49c335a983d4ca3a6ec8766d6c528b0e",
      "libNodeRefId": "@buildship/openai-multi-gpt4-vision",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-multi-gpt4-vision/1.0.0/build.cjs",
      "version": "1.0.0"
    },
    "version": "1.1.0",
    "script": "import OpenAI from 'openai';\n\nexport default async function openAIGPT4VisionImageAnalysis({\n    apiKey,\n    text,\n    imageUrls,\n    maxTokens\n}: NodeInputs) : NodeOutput  {\n    try {\n        const openai = new OpenAI({\n            apiKey\n        });\n\n        const messages = [{\n            role: 'user',\n            content: [{\n                type: 'text',\n                text: text\n            }]\n        }];\n\n        // Add image URLs to messages\n        imageUrls.forEach(imageUrl => {\n            messages[0].content.push({\n                type: 'image_url',\n                image_url: {\n                    url: imageUrl\n                }\n            });\n        });\n\n        const response = await openai.chat.completions.create({\n            model: 'gpt-4-vision-preview',\n            messages: messages,\n            max_tokens: maxTokens\n        });\n\n        if (response && response.choices && response.choices.length > 0) {\n            const content = response.choices[0]?.message?.content;\n            if (content) {\n                return content;\n            } else {\n                throw new Error('Content not found in the response');\n            }\n        } else {\n            throw new Error('Invalid response from OpenAI API');\n        }\n    } catch (error) {\n        throw new Error('Error communicating with OpenAI API: ' + error.message);\n    }\n}",
    "failCount": 19,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 63000000 },
    "usageCounter": 313
  },
  {
    "type": "script",
    "script": "import fs from 'fs';\nimport fetch from 'node-fetch';\n\nconst getEmbeddings = (openaiSecret) => async (content) => {\n  const resp = await fetch(\"https://api.openai.com/v1/embeddings\", {\n    body: JSON.stringify({\n      input: content,\n       \"model\": \"text-embedding-ada-002\"\n    }),\n    headers: {\n      Authorization: \"Bearer \" + openaiSecret,\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\"\n  })\n  const embeddings = await resp.json()\n  console.log(embeddings)\n  return embeddings.data[0].embedding\n  }\n  \n\nfunction dotProduct(vectorA, vectorB) {\n  if (vectorA.length !== vectorB.length) {\n    console.log(!vectorA, !vectorB);\n    throw new Error('Vectors must have the same length');\n  }\n\n  return vectorA.reduce((sum, value, index) => sum + value * vectorB[index], 0);\n}\n\nfunction compareVectorWithEmbeddings(embeddings, newVector, numNeighbors = 10) {\n\n\n  const comparisonResults = embeddings.map((embeddingObject) => {\n    return {\n      id: embeddingObject.id,\n      dotProduct: dotProduct(newVector, embeddingObject.embedding),\n    };\n  });\n\n  return comparisonResults\n    .sort((a, b) => b.dotProduct - a.dotProduct)\n    .slice(0, numNeighbors);\n}\n\n\n\n const neighborSearch = (openaiSecret ) =>  async (searchQuery,embeddingsFile,numNeighbors=5) => {\n    const embeddingsJson = JSON.parse(`[${fs.readFileSync(embeddingsFile, 'utf8').replace(/\\n/g, ',').slice(0, -1)}]`);\n    // check if embeddingsJson is an array\n    if (!Array.isArray(embeddingsJson)) {\n        throw new Error('Embeddings file must be an array');\n    }\n    // check if embeddingsJson is empty\n    if (embeddingsJson.length === 0) {\n        throw new Error('Embeddings file must not be empty');\n    }\n    // check if any embedding is empty throws error with id\n    embeddingsJson.forEach((embeddingObject) => {\n        if (!embeddingObject.embedding) {\n            throw new Error(`Embedding for id ${embeddingObject.id} is empty`);\n        }\n    });\n    const startGenerateEmbeddingTimer = Date.now();\n    const queryEmbeddings = await getEmbeddings(openaiSecret)(searchQuery);\n    console.log(`Generated embeddings for query in ${Date.now() - startGenerateEmbeddingTimer}ms`);\n    const startCompareEmbeddingsTimer = Date.now();\n    const nearestNeighbors = compareVectorWithEmbeddings(embeddingsJson, queryEmbeddings,numNeighbors);\n    console.log(`Compared embeddings in ${Date.now() - startCompareEmbeddingsTimer}ms`);\n\n    return {nearestNeighbors};\n}\nexport default neighborSearch;",
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "dependencies": { "node-fetch": "3.3.2", "fs": "0.0.1-security" },
    "output": {
      "buildship": {},
      "title": "Neighbor Search",
      "type": "object",
      "properties": {
        "nearestNeighbors": {
          "buildship": { "index": 0 },
          "description": "An array of nearest neighbors with their id and dot product value",
          "title": "Nearest Neighbors",
          "type": "array"
        }
      }
    },
    "inputs": {
      "type": "object",
      "required": ["searchQuery", "embeddingsFile", "openaiSecret"],
      "properties": {
        "numNeighbors": {
          "default": "5",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The number of nearest neighbors to return (default is 5)",
          "title": "Number of Neighbors",
          "type": "number"
        },
        "openaiSecret": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The API secret key for OpenAI",
          "title": "API Key",
          "type": "string"
        },
        "searchQuery": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The search query content to find nearest neighbors",
          "title": "Search Query",
          "type": "string"
        },
        "embeddingsFile": {
          "default": "",
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The file path of the embeddings JSON data",
          "title": "Embeddings File",
          "type": "string"
        }
      }
    },
    "version": "1.0.1",
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701543032, "_nanoseconds": 469000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Find the nearest neighbors for a given search query using OpenAI embeddings",
      "id": "openai-neighbor-search",
      "name": "Neighbor Search"
    },
    "t": 311,
    "syncAllAtOnce": "1068",
    "integrity": "v3:053cd1ec91de936c2f4cee2e9474e256",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-neighbor-search/1.0.1/build.cjs",
    "id": "openai-neighbor-search",
    "_libRef": {
      "integrity": "v3:053cd1ec91de936c2f4cee2e9474e256",
      "libNodeRefId": "@buildship/openai-neighbor-search",
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/builtNodes/openai-neighbor-search/1.0.1.cjs",
      "version": "1.0.1"
    },
    "integrations": [],
    "failCount": 3,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 64000000 },
    "usageCounter": 268
  },
  {
    "output": {
      "buildship": {},
      "description": "Returns the response upon successful completion.",
      "title": "Response",
      "type": "string"
    },
    "inputs": {
      "type": "object",
      "required": ["systemPrompt", "userRequest", "temperature", "openaiSecret", "model"],
      "properties": {
        "systemPrompt": {
          "buildship": { "index": 1 },
          "description": "The system prompt to set the context",
          "title": "System Prompt",
          "type": "string"
        },
        "openaiSecret": {
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "userRequest": {
          "buildship": { "index": 2 },
          "description": "The user's message to the chat",
          "title": "User Request",
          "type": "string"
        },
        "temperature": {
          "default": 0.7,
          "buildship": { "index": 3 },
          "description": "The temperature for the output",
          "title": "Temperature",
          "type": "number"
        },
        "model": {
          "default": "gpt-3.5-turbo",
          "buildship": {
            "options": [
              { "label": "gpt-4-turbo", "value": "gpt-4-1106-preview" },
              { "label": "gpt-4", "value": "gpt-4" },
              { "label": "gpt-3.5-turbo", "value": "gpt-3.5-turbo" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "The OpenAI model to use",
          "title": "Model",
          "type": "string",
          "enum": ["gpt-4-1106-preview", "gpt-4", "gpt-3.5-turbo"]
        }
      }
    },
    "type": "script",
    "integrations": [],
    "script": "import { Readable } from \"stream\";\nimport OpenAI from \"openai\";\n\n// Function to stream data from readStream to writeStream\nfunction streamer(writeStream, readStream) {\n  return new Promise(function (resolve, reject) {\n    let response = \"\";\n    \n    readStream.on(\"content\", (chunk) => {\n      // Extracting the payload and removing \"data: \" from each chunk\n      const payloads = chunk.toString();\n\n      for (const payload of payloads) {\n        const cleaned = payload.replace(\"data: \", \"\");\n        // Push cleaned payload to the writeStream\n        writeStream.push(cleaned);\n        response += cleaned;\n      }\n    });\n\n    readStream.on(\"end\", () => {\n      // Resolve the promise when the readStream ends\n      resolve(response);\n    });\n\n    readStream.on(\"error\", () => {\n      // Handle errors by pushing an error message to the writeStream and resolving the promise\n      writeStream.push(\"err...\");\n      resolve(\"\");\n    });\n  });\n}\n\nexport default async (\n  { userRequest, systemPrompt, openaiSecret, model, temperature },\n  { logging, req: ctx = {}},\n) => {\n  // Create a new Readable stream for writing the response\n  let writeStream = (ctx.body = new Readable());\n  writeStream._read = function () {}; // Make the writeStream readable\n  writeStream.pipe(ctx.res); // Pipe the writeStream to the response object to send data to the client\n  ctx.type = \"text/undefined-content\";\n\n  // Set response headers\n  Object.assign(ctx.response.headers, {\n    \"Transfer-Encoding\": \"chunked\",\n    Connection: \"keep-alive\",\n  });\n\n  // Initialize OpenAI API client\n  const openai = new OpenAI({\n    apiKey: openaiSecret,\n  });\n\n  try {\n    // Make an asynchronous call to OpenAI API to get stream response\n    const completion = await openai.beta.chat.completions.stream(\n      {\n        model,\n        temperature,\n        messages: [\n          {\n            role: \"system\",\n            content: systemPrompt,\n          },\n          {\n            role: \"user\",\n            content: userRequest,\n          },\n        ],\n        stream: true,\n      },\n      {\n        responseType: \"stream\",\n      },\n    );\n\n    // Stream data from completion to the writeStream\n    const response = await streamer(writeStream, completion);\n    return response;\n  } catch (error) {\n    // Handle errors if any\n    logging.log(error);\n    return \"\";\n  }\n};\n",
    "dependencies": { "openai": "4.24.7", "stream": "0.0.2" },
    "live": true,
    "category": ["Integrations"],
    "group": [
      {
        "uid": "openai",
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "integrity": "v3:6121f0d75d338ace5863421d605bb34b",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-stream-response/1.0.3/build.cjs",
    "meta": {
      "name": "Stream Response",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Send a chat message to OpenAI and stream the response back to the client.\n\n**Important**: this node does not support Workflow/Node Testing.\n\n**Note**: add a blank return node at the end to prevent printing `OK` in the response.\n\n",
      "id": "openai-stream-response"
    },
    "version": "1.0.3",
    "syncIndex": {
      "ranBy": "anish@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1706250973, "_nanoseconds": 769000000 }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "failCount": 15,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 64000000 },
    "usageCounter": 1038
  },
  {
    "output": {
      "buildship": {},
      "description": "The audio of the speech in base64 format",
      "title": "Speech Audio",
      "type": "string"
    },
    "type": "script",
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "featured": true,
    "live": true,
    "inputs": {
      "type": "object",
      "required": ["apiKey", "model", "voice", "input"],
      "properties": {
        "voice": {
          "buildship": {
            "options": [
              { "label": "alloy", "value": "alloy" },
              { "label": "echo", "value": "echo" },
              { "label": "fable", "value": "fable" },
              { "label": "onyx", "value": "onyx" },
              { "label": "nova", "value": "nova" },
              { "label": "shimmer", "value": "shimmer" }
            ],
            "index": 3,
            "sensitive": false
          },
          "pattern": "",
          "description": "The voice to be used for the speech.",
          "title": "Voice",
          "type": "string",
          "enum": ["alloy", "echo", "fable", "onyx", "nova", "shimmer"]
        },
        "input": {
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The text to be converted to speech.",
          "title": "Input Text",
          "type": "string"
        },
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "model": {
          "buildship": {
            "options": [
              { "label": "tts-1", "value": "tts-1" },
              { "label": "tts-1-hd", "value": "tts-1-hd" }
            ],
            "index": 1,
            "sensitive": false
          },
          "pattern": "",
          "description": "The model to be used for the text to speech conversion.",
          "title": "Model",
          "type": "string",
          "enum": ["tts-1", "tts-1-hd"]
        }
      }
    },
    "dependencies": { "node-fetch": "3.3.2" },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701542639, "_nanoseconds": 976000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Converts text to speech using OpenAI API and returns audio in Base64.",
      "id": "openai-text-to-speech",
      "name": "Text to Speech"
    },
    "t": 303,
    "syncAllAtOnce": "943",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 299000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-text-to-speech",
    "integrations": [],
    "integrity": "v3:81cdd504814b2491fce11ce09b560db4",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-text-to-speech/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:fde1e72a7c97345cf7c2386b33a34264",
      "libNodeRefId": "@buildship/openai-text-to-speech",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-text-to-speech/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "version": "1.1.0",
    "script": "import fetch from 'node-fetch';\nexport default async function textToSpeech({\n    apiKey,\n    model,\n    input,\n    voice\n}: NodeInputs) : NodeOutput  {\n    const response = await fetch('https://api.openai.com/v1/audio/speech', {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${apiKey}`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            model,\n            input,\n            voice\n        })\n    });\n    const buffer = await response.buffer();\n    return buffer.toString('base64');\n}",
    "failCount": 33,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 64000000 },
    "usageCounter": 2370
  },
  {
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "output": {
      "buildship": {},
      "description": "The answer to the image question",
      "title": "Output",
      "type": "string"
    },
    "_createdBy": {
      "uid": "5pCgHZpkCmTSRrtmK9Ld7emLKLJ2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AGNmyxaoKyi1YHoiusuLWh9sPHGzirW-H-miXcE4eOey=s96-c",
      "isAnonymous": false,
      "displayName": "Luis Rodge",
      "email": "luis@rowy.io.rowy",
      "timestamp": { "_seconds": 1699545870, "_nanoseconds": 505000000 }
    },
    "live": true,
    "type": "script",
    "dependencies": { "openai": "4.19.0" },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1700465408, "_nanoseconds": 808000000 }
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Use GPT-4 Vision to ask questions about images.",
      "id": "openai-vision",
      "name": "GPT-4 Vision"
    },
    "t": 377,
    "syncAllAtOnce": "948",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 300000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "id": "openai-vision",
    "integrations": [],
    "inputs": {
      "type": "object",
      "properties": {
        "input": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "Questions to ask about the image.",
          "type": "string",
          "title": "Question"
        },
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "imageUrl": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The image to question. (Can also use Base64 encoded images.)",
          "title": "Image URL",
          "type": "string"
        },
        "maxTokens": {
          "default": 300,
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The maximum tokens for the generated response.",
          "type": "number",
          "title": "Max Tokens"
        },
        "model": {
          "default": "",
          "buildship": {
            "options": [
              { "label": "gpt-4o", "value": "gpt-4o" },
              { "label": "gpt-4-turbo", "value": "gpt-4-turbo" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "Select the model to use for the GPT Vision.",
          "title": "Model",
          "type": "string",
          "enum": ["gpt-4o", "gpt-4-turbo"]
        },
        "detail": {
          "default": "auto",
          "buildship": {
            "options": [
              { "label": "Auto", "value": "auto" },
              { "label": "Low Fidelity", "value": "low" },
              { "label": "High Fidelity", "value": "high" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "Control over how the model processes the image and generates its textual understanding.",
          "title": "Detail",
          "type": "string",
          "enum": ["auto", "low", "high"]
        }
      },
      "required": ["apiKey", "voice", "imageUrl", "input"]
    },
    "integrity": "v3:4b21cc9318f969863bc2e4af1df6fd60",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-vision/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:fce2948e1d3cbeaff3184b5eb2fbce96",
      "libNodeRefId": "@buildship/openai-vision",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/openai-vision/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "version": "1.1.0",
    "script": "import OpenAI from \"openai\";\n\nexport default async function gptVision({\n    apiKey,\n    input,\n    imageUrl,\n    maxTokens,\n    detail\n}: NodeInputs) : NodeOutput  {\n  const openai = new OpenAI({ apiKey });\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4-vision-preview\",\n    messages: [\n      {\n        role: \"user\",\n        content: [\n          { type: \"text\", text: input },\n          {\n            type: \"image_url\",\n            image_url: {\n              url: imageUrl,\n              detail\n            },\n          },\n        ],\n      },\n    ],\n  max_tokens: maxTokens,\n  }\n);\n  return response.choices[0].message.content;\n}",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 64000000 },
    "usageCounter": 912,
    "failCount": 123
  },
  {
    "type": "script",
    "category": ["Integrations"],
    "group": [
      {
        "name": "OpenAI",
        "description": "Open AI Models",
        "id": "ZBwcODUEhzNMxYxpN1O8",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      }
    ],
    "live": true,
    "inputs": {
      "type": "object",
      "properties": {
        "openaiSecret": {
          "default": "",
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API Key. (Get your OpenAI API Key [here](https://platform.openai.com/account/api-keys).)",
          "title": "API Key",
          "type": "string"
        },
        "mediaUrl": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "Speech media URL.",
          "title": "Media URL",
          "type": "string"
        }
      },
      "required": ["openaiSecret", "mediaUrl"]
    },
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fopenai.png?alt=media&token=9c513dd1-e2d4-47d2-8e3c-3a1a6ebf03e3"
      },
      "description": "Convert audio/speech to text using OpenAI's Whisper API.",
      "id": "speech-to-text",
      "name": "Whisper Speech To Text"
    },
    "t": 262,
    "syncAllAtOnce": "995",
    "integrations": [],
    "deployToBucket": {
      "ranBy": "luis@rowy.io.rowy",
      "completedAt": { "_seconds": 1710294672, "_nanoseconds": 533000000 }
    },
    "groupInfo": "ZBwcODUEhzNMxYxpN1O8",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "syncIndex",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1713275271, "_nanoseconds": 384000000 }
    },
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1713275271, "_nanoseconds": 417000000 }
    },
    "output": {
      "buildship": {},
      "type": "object",
      "properties": {
        "text": { "buildship": {}, "description": "The speech text", "type": "string", "title": "Speech Text" },
        "stringifiedJson": {
          "buildship": {},
          "description": "The JSON object converted to a string",
          "title": "Stringified JSON",
          "type": "string"
        }
      }
    },
    "id": "speech-to-text",
    "dependencies": { "node-fetch": "3.3.2", "form-data": "4.0.0" },
    "integrity": "v3:421fe8d5e28f2f1bf8e0383f2d4fa17f",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/speech-to-text/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:b6f8a321261578aebba140ca1ba708d5",
      "libNodeRefId": "@buildship/speech-to-text",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/speech-to-text/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "version": "1.1.0",
    "script": "import FormData from \"form-data\";\nimport fetch from 'node-fetch'\n\nexport default async function convertSpeechToText({ mediaUrl, openaiSecret }: NodeInputs) : NodeOutput  {\n  try {\n    const fileStream = await fetch(mediaUrl);\n    const arrayBuffer = await fileStream.arrayBuffer();\n\n    const form = new FormData();\n    form.append(\"file\", Buffer.from(arrayBuffer), {\n      filename: \"audio.mp3\",\n      contentType: \"audio/mp3\",\n    });\n    form.append(\"model\", \"whisper-1\");\n\n    const response = await fetch(\"https://api.openai.com/v1/audio/transcriptions\", {\n      method: \"POST\",\n      headers: {\n        Authorization:\n          `Bearer ${openaiSecret}`,\n      },\n      body: form,\n    });\n\n    const data = await response.json();\n    return { text: data.text.trim() }\n  } catch (err) {\n    return { text: null }\n  }\n}\n",
    "failCount": 8,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 67000000 },
    "usageCounter": 906
  }
]
