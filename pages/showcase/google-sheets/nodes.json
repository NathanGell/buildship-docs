[
  {
    "output": {
      "buildship": {},
      "description": "The newly created Google Spreadsheet",
      "title": "Spreadsheet",
      "type": "object"
    },
    "meta": {
      "name": "Create Sheet",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      },
      "description": "Creates a new Google Spreadsheet.",
      "id": "oauth-gdocs-create-sheet"
    },
    "type": "script",
    "dependencies": { "node-fetch": "2.7.0" },
    "inputs": {
      "type": "object",
      "properties": {
        "spreadsheet": {
          "default": {},
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The spreadsheet to be created. This node initializes a new spreadsheet. [Refer API Documentation here](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nQUICK TIP ðŸ’¡: Use the **Append Values** node to add values to the spreadsheet.\n\nSAMPLE INPUT:\n```\n{\n    properties: {\n      title: \"WORLD COVID DATA\" \n    },\n    sheets: [\n      { //sheet1\n        properties: {\n          title: \"Sheet1\",\n          gridProperties: {\n            columnCount: 18, \n            rowCount: 18, \n            frozenRowCount: 1,\n            frozenColumnCount: 1,\n          },\n          tabColor: { \n            red: 1.0,\n            green: 0.3,\n            blue: 0.4\n          },\n        },\n      },\n      { //sheet2\n        properties: {\n          title: \"Sheet2\",\n          gridProperties: {\n            columnCount: 18, \n            rowCount: 10, \n            frozenRowCount: 1,\n            frozenColumnCount: 1,\n          },\n          tabColor: { \n            red: 0.0,\n            green: 0.0,\n            blue: 1.0\n          },\n        },\n      },            \n    ],\n }\n```",
          "title": "Spreadsheet",
          "type": "object",
          "properties": {}
        }
      },
      "required": ["apiKey", "spreadsheet"]
    },
    "category": ["Integrations"],
    "group": [
      {
        "name": "Google Sheets",
        "description": "OAuth Nodes for utilizing the Google Sheets API to perform operations on your Google Sheets Document.",
        "id": "0IAjU2tekQHjibkvicox",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      }
    ],
    "integrations": ["gsheets"],
    "t": 146,
    "syncAllAtOnce": "954",
    "live": true,
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1710753619, "_nanoseconds": 167000000 }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832978, "_nanoseconds": 486000000 }
    },
    "groupInfo": "0IAjU2tekQHjibkvicox",
    "id": "oauth-gdocs-create-sheet",
    "integrity": "v3:03ed790dd788ac12b684fe7fb63b844c",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gdocs-create-sheet/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:3789f523712e898bb25ee2ed756ccea5",
      "libNodeRefId": "@buildship/oauth-gdocs-create-sheet",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gdocs-create-sheet/1.0.2/build.cjs",
      "version": "1.0.2"
    },
    "version": "1.1.0",
    "script": "import fetch from 'node-fetch';\nexport default async function createGoogleSpreadsheet({\n    spreadsheet\n}: NodeInputs,{\n  auth\n}: NodeScriptOptions) : NodeOutput  {\n    const { access_token } = await auth.getToken();\n    const response = await fetch('https://sheets.googleapis.com/v4/spreadsheets', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        },\n        body: JSON.stringify(spreadsheet)\n    });\n    const data = await response.json();\n    return data;\n}",
    "failCount": 12,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 57000000 },
    "usageCounter": 368
  },
  {
    "type": "script",
    "integrations": ["gsheets"],
    "dependencies": {},
    "category": ["Integrations"],
    "group": [
      {
        "uid": "google-sheets",
        "name": "Google Sheets",
        "description": "OAuth Nodes for utilizing the Google Sheets API to perform operations on your Google Sheets Document.",
        "id": "0IAjU2tekQHjibkvicox",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      }
    ],
    "output": {
      "buildship": {},
      "description": "The response from the Google Sheets API",
      "title": "Google Sheets Response",
      "type": "object"
    },
    "meta": {
      "name": "Add Row",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      },
      "description": "Adds row(s) of data in a Google Sheet.",
      "id": "oauth-gsheets-add-row"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1705992455, "_nanoseconds": 480000000 }
    },
    "live": true,
    "groupInfo": "0IAjU2tekQHjibkvicox",
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1713131433, "_nanoseconds": 179000000 }
    },
    "id": "oauth-gsheets-add-row",
    "_libRef": {
      "integrity": "v3:9b8c84549f192b02cf4ec785f7b3f09b",
      "libNodeRefId": "@buildship/oauth-gsheets-add-row",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-add-row/1.0.4/build.cjs",
      "version": "1.0.4"
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTteHR1mYhhB_mvgntLyHkZFTdhB-nqqb3xJiKW13sX6odg=s96-c",
      "uid": "HIGVNMhvkORk3bmp9wPorP5wsXT2",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1717161369, "_nanoseconds": 564000000 }
    },
    "integrity": "v3:bc22c70990477dcb60f5b3d8b244f1b3",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-add-row/1.1.1/build.cjs",
    "inputs": {
      "type": "object",
      "properties": {
        "dataArray": {
          "default": [],
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The new values to be added as a row to the spreadsheet.\n\nSAMPLE INPUT:\n```\n[\n  [\"Cell1\", \"Cell2\"],\n  [\"Cell3\", \"Cell4\"]\n]\n```",
          "type": "array",
          "title": "Data"
        },
        "spreadsheetUrl": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The URL of the Google Spreadsheet to add row(s) to. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
          "type": "string",
          "title": "Sheet URL"
        },
        "sheetName": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The name of the Spreadsheet. You can find this at the bottom left corner of you Google Sheet.",
          "type": "string",
          "title": "Sheet Name"
        },
        "lastRow": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The first cell number of the row you wish to add the row to. (We recommend you to add this to avoid your data being overwritten accidentally.) You can even define a range of cells as described [here](https://developers.google.com/sheets/api/guides/concepts#cell).\n\nSAMPLE INPUT:\n```\nA11\n```",
          "title": "Cell Number",
          "type": "string"
        },
        "dimension": {
          "default": "ROWS",
          "buildship": {
            "options": [
              { "label": "ROWS", "value": "ROWS" },
              { "label": "COLUMNS", "value": "COLUMNS" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "The major dimension of the values to be added.",
          "title": "Dimension",
          "type": "string",
          "enum": ["ROWS", "COLUMNS"]
        }
      },
      "required": ["sheetName", "dataArray", "spreadsheetUrl"]
    },
    "version": "1.1.1",
    "script": "function getTotalSubarrays(data, sheetName) {\n  const values = data.values;\n\n  if (Array.isArray(values)) {\n    // const numberOfSubarrays = values.filter(row => row.length > 0).length;\n    const numberOfSubarrays = values.length;\n    return `${sheetName}!A${numberOfSubarrays+1}`;\n  }\n\n  // Handle the case where \"values\" is not an array\n  return `${sheetName}!A1`; // Adjust to your specific default range or handle accordingly\n}\n\n\nexport default async function batchUpdateGoogleSheet({\n    spreadsheetUrl,\n    dataArray,\n    sheetName,\n    lastRow,\n    dimension\n}: NodeInputs,{\n  auth\n}: NodeScriptOptions) : NodeOutput  {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1]\n  \n    const getSheet = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetName}`, {\n          method: 'GET',\n          headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${access_token}`\n          }\n      });\n  \n  const result = await getSheet.json();\n\n  const notation = lastRow ? lastRow : getTotalSubarrays(result, sheetName);\n  \n    const valueInputOption = \"RAW\";\n    const includeValuesInResponse = true;\n    const responseValueRenderOption = \"FORMATTED_VALUE\";\n    const responseDateTimeRenderOption = \"FORMATTED_STRING\";\n    const data = [\n      {\n        range: notation,\n        majorDimension: dimension,\n        values: dataArray\n      }\n    ];\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values:batchUpdate`;\n    const body = {\n        valueInputOption,\n        data,\n        includeValuesInResponse,\n        responseValueRenderOption,\n        responseDateTimeRenderOption\n    };\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${access_token}`\n        }\n    });\n    const updates = await response.json();\n    return updates;\n    // const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values:batchUpdate`;\n    // const body = {\n    //     valueInputOption,\n    //     data,\n    //     includeValuesInResponse,\n    //     responseValueRenderOption,\n    //     responseDateTimeRenderOption\n    // };\n    // const response = await fetch(url, {\n    //     method: 'POST',\n    //     body: JSON.stringify(body),\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         Authorization: `Bearer ${access_token}`\n    //     }\n    // });\n    // const update = await response.json();\n    // return update;\n}",
    "failCount": 73,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 58000000 },
    "usageCounter": 746
  },
  {
    "output": {
      "buildship": {},
      "description": "The response from the Google Sheets API",
      "title": "Google Sheets Response",
      "type": "object"
    },
    "meta": {
      "name": "Batch Update Sheet",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      },
      "description": "Batch updates values in a Google Sheet",
      "id": "oauth-gsheets-batch-update"
    },
    "type": "script",
    "dependencies": { "node-fetch": "2.7.0" },
    "group": [
      {
        "name": "Google Sheets",
        "description": "OAuth Nodes for utilizing the Google Sheets API to perform operations on your Google Sheets Document.",
        "id": "0IAjU2tekQHjibkvicox",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      }
    ],
    "category": ["Integrations"],
    "integrations": ["gsheets"],
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1704371173, "_nanoseconds": 219000000 }
    },
    "t": 210,
    "syncAllAtOnce": "952",
    "live": true,
    "groupInfo": "0IAjU2tekQHjibkvicox",
    "inputs": {
      "type": "object",
      "required": ["data", "spreadsheetUrl"],
      "properties": {
        "responseValueRenderOption": {
          "default": "FORMATTED_VALUE",
          "buildship": {
            "options": [
              { "label": "FORMATTED_VALUE", "value": "FORMATTED_VALUE" },
              { "label": "UNFORMATTED_VALUE", "value": "UNFORMATTED_VALUE" },
              { "label": "FORMULA", "value": "FORMULA" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "Determines how values in the response should be rendered",
          "title": "Response Value Render Option",
          "type": "string",
          "enum": ["FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"]
        },
        "data": {
          "default": [],
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The new values to apply to the spreadsheet.\n\nSAMPLE INPUT:\n```\n[\n        {\n            range: 'Sheet1!A1:B2', // Range to update in A1 notation\n            majorDimension: 'ROWS', // ROWS or COLUMNS\n            values: [\n                ['New Value 1', 'New Value 2'],\n                ['New Value 3', 'New Value 4'],\n            ],\n        },\n        // Add more ValueRange objects if needed\n    ]\n```",
          "title": "Data",
          "type": "array"
        },
        "valueInputOption": {
          "default": "RAW",
          "buildship": {
            "options": [
              { "label": "RAW", "value": "RAW" },
              { "label": "USER_ENTERED", "value": "USER_ENTERED" }
            ],
            "index": 1,
            "sensitive": false
          },
          "pattern": "",
          "description": "How the input data should be interpreted",
          "title": "Value Input Option",
          "type": "string",
          "enum": ["RAW", "USER_ENTERED"]
        },
        "spreadsheetUrl": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The URL of the Google Spreadsheet to update. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
          "title": "Sheet URL",
          "type": "string"
        },
        "responseDateTimeRenderOption": {
          "default": "SERIAL_NUMBER",
          "buildship": {
            "options": [
              { "label": "SERIAL_NUMBER", "value": "SERIAL_NUMBER" },
              { "label": "FORMATTED_STRING", "value": "FORMATTED_STRING" }
            ],
            "index": 5,
            "sensitive": false
          },
          "pattern": "",
          "description": "Determines how dates, times, and durations in the response should be rendered",
          "title": "Response Date Time Render Option",
          "type": "string",
          "enum": ["SERIAL_NUMBER", "FORMATTED_STRING"]
        },
        "includeValuesInResponse": {
          "default": "true",
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "Determines if the update response should include the values of the cells that were updated",
          "title": "Include Values In Response",
          "type": "boolean"
        }
      }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "syncIndex",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1713131384, "_nanoseconds": 130000000 }
    },
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1713131384, "_nanoseconds": 158000000 }
    },
    "integrity": "v3:9d55dbf4d5bcd8e98804194db91a584e",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-batch-update/1.1.0/build.cjs",
    "id": "oauth-gsheets-batch-update",
    "_libRef": {
      "integrity": "v3:4379497fcc949e969fc3fc21822271dc",
      "libNodeRefId": "@buildship/oauth-gsheets-batch-update",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-batch-update/1.0.2/build.cjs",
      "version": "1.0.2"
    },
    "version": "1.1.0",
    "script": "import fetch from 'node-fetch';\nexport default async function batchUpdateGoogleSheet({\n    spreadsheetUrl,\n    valueInputOption,\n    data,\n    includeValuesInResponse,\n    responseValueRenderOption,\n    responseDateTimeRenderOption\n}: NodeInputs,{\n  auth\n}: NodeScriptOptions) : NodeOutput  {\n    const { access_token } = await auth.getToken();\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1]\n  \n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values:batchUpdate`;\n    const body = {\n        valueInputOption,\n        data,\n        includeValuesInResponse,\n        responseValueRenderOption,\n        responseDateTimeRenderOption\n    };\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${access_token}`\n        }\n    });\n    const result = await response.json();\n    return result;\n}",
    "failCount": 23,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 58000000 },
    "usageCounter": 412
  },
  {
    "type": "script",
    "dependencies": { "node-fetch": "2.7.0" },
    "group": [
      {
        "name": "Google Sheets",
        "description": "OAuth Nodes for utilizing the Google Sheets API to perform operations on your Google Sheets Document.",
        "id": "0IAjU2tekQHjibkvicox",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      }
    ],
    "category": ["Integrations"],
    "integrations": ["gsheets"],
    "t": 347,
    "syncAllAtOnce": "1064",
    "groupInfo": "0IAjU2tekQHjibkvicox",
    "meta": {
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2FGoogleSheets.png?alt=media&token=89b3cfec-6746-43da-a404-5d20adb60472"
      },
      "name": "Get Sheets",
      "description": "Fetch a Google Spreadsheet using the Google Sheets API",
      "id": "oauth-gsheets-get-sheet"
    },
    "live": true,
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1712856756, "_nanoseconds": 538000000 }
    },
    "id": "oauth-gsheets-get-sheet",
    "_libRef": {
      "integrity": "v3:3e9bed62e574d6b4bd10c6a203152a74",
      "libNodeRefId": "@buildship/oauth-gsheets-get-sheet",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.0.5/build.cjs",
      "version": "1.0.5"
    },
    "output": {
      "buildship": { "index": 0 },
      "type": "object",
      "properties": {
        "majorDimension": { "buildship": { "index": 1 }, "type": "string", "title": "majorDimension" },
        "values": {
          "buildship": { "index": 2 },
          "type": "array",
          "title": "values",
          "items": { "type": "array", "items": { "type": "string" } }
        },
        "range": { "buildship": { "index": 0 }, "type": "string", "title": "range" }
      }
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTteHR1mYhhB_mvgntLyHkZFTdhB-nqqb3xJiKW13sX6odg=s96-c",
      "uid": "HIGVNMhvkORk3bmp9wPorP5wsXT2",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1717146823, "_nanoseconds": 30000000 }
    },
    "integrity": "v3:57286f7a7adbc7b2da7e07459b2c9b67",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/oauth-gsheets-get-sheet/1.1.1/build.cjs",
    "inputs": {
      "type": "object",
      "properties": {
        "ranges": {
          "default": [],
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The name of the Spreadsheet. You can find this at the bottom left corner of you Google Sheet.\n\n**SAMPLE INPUT:**\n```\nSheet 1\n```",
          "title": "Sheet Name",
          "type": "string"
        },
        "spreadsheetUrl": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The URL of the Google Spreadsheet to fetch. [Refer API Documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create).\n\nTIP ðŸ’¡: Available in the following format in your Google Sheets: `https://docs.google.com/spreadsheets/d/spreadsheet-id/edit`",
          "title": "Sheet URL",
          "type": "string"
        }
      },
      "required": ["apiKey", "includeGridData", "spreadsheetUrl"]
    },
    "version": "1.1.1",
    "script": "import fetch from 'node-fetch';\n\nexport default async function fetchGoogleSpreadsheet({\n    spreadsheetUrl,\n    ranges\n}: NodeInputs, {\n    auth,\n    logging\n}: NodeScriptOptions) : NodeOutput  {\n    const { access_token } = await auth.getToken();\n    logging.log('Access token', access_token);\n\n    // Extracting spreadsheetId from the URL\n    const regex = /\\/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/;\n    const match = spreadsheetUrl.match(regex);\n    if (!match) {\n        throw new Error('Invalid spreadsheet URL');\n    }\n    const spreadsheetId = match[1];\n\n    // const rangeString = Array.isArray(ranges) && ranges.length > 0 ? `/values/${ranges.join(',')}` : '';\n  const rangeString = ranges ? `/values/${ranges}` : \"\";\n  \n    const response = await fetch(`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}${encodeURI(rangeString)}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${access_token}`\n        }\n    });\n  \n    return await response.json();\n}\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 58000000 },
    "failCount": 171,
    "usageCounter": 1023
  }
]
