[
  {
    "output": { "buildship": {}, "description": "The extracted fields", "title": "Results", "type": "array" },
    "inputs": {
      "type": "object",
      "required": ["text", "url", "fields", "apiKey"],
      "properties": {
        "mode": {
          "default": "html",
          "buildship": {
            "options": [
              { "label": "Text", "value": "text" },
              { "label": "HTML", "value": "html" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "Choose the extraction mode to use. The `Text` option provides a concise context but omits web page semantics like URLs. Select `HTML` to preserve HTML semantics during extraction.",
          "title": "Mode",
          "type": "string",
          "enum": ["text", "html"]
        },
        "apiKey": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The Anthropic API key. Get your API Key from the [ANTHROPIC Dashboard](https://console.anthropic.com/).",
          "title": "API Key",
          "type": "string"
        },
        "selector": {
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "Specific HTML selector you want to extract from (by default body will be used).",
          "title": "Selector",
          "type": "string"
        },
        "fields": {
          "default": "",
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "List the field names to extract, separated by commas. For example: `title, price, description`.",
          "title": "Fields",
          "type": "string"
        },
        "url": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The URL for the AI to extract information from.",
          "title": "URL",
          "type": "string"
        }
      }
    },
    "_createdBy": {
      "displayName": "Save to Library",
      "timestamp": { "_seconds": 1716218500, "_nanoseconds": 644000000 }
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "@anthropic-ai/sdk": "0.21.0" },
    "live": true,
    "group": [
      {
        "uid": "anthropic",
        "name": "Anthropic",
        "description": "Nodes for interacting with and using Anthropic's Claude AI Models.",
        "id": "anthropic",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      }
    ],
    "groupInfo": "anthropic",
    "category": ["Integrations"],
    "syncIndex": {
      "ranBy": "luis@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1716218945, "_nanoseconds": 947000000 }
    },
    "deployToBucket": {
      "ranBy": "luis@rowy.io.rowy",
      "completedAt": { "_seconds": 1716218949, "_nanoseconds": 63000000 }
    },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716276831, "_nanoseconds": 894000000 }
    },
    "integrity": "v3:ee6507a2905a2e50ab93a70e0b58873c",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/anthropic-extract/2.1.0/build.cjs",
    "meta": {
      "name": "LLM Extract",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      },
      "description": "Extract structured data from any web page.",
      "id": "anthropic-extract"
    },
    "id": "anthropic-extract",
    "version": "2.1.0",
    "_libRef": {
      "integrity": "v3:0fe85670e5c738f8ef3dabea127fc50f",
      "libNodeRefId": "@buildship/anthropic-extract",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/anthropic-extract/2.0.0/build.cjs",
      "version": "2.0.0"
    },
    "script": "import Anthropic from \"@anthropic-ai/sdk\";\n\nexport default async function llmExtract(\n  { apiKey, url, selector, fields, text, mode = \"html\" }: NodeInputs,\n  { logging }\n: NodeScriptOptions) : NodeOutput  {\n  let result;\n\n  if (mode === \"html\") {\n    const response = await fetch(\"https://puppeteer.buildship.run/v1/html\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        url,\n        selector,\n        steps: [],\n      }),\n    });\n    result = await response.json();\n  } else {\n    const response = await fetch(\"https://puppeteer.buildship.run/v1/text\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        url,\n        selector,\n        steps: [],\n      }),\n    });\n    result = await response.text();\n  }\n\n  let extractionText;\n  if (Array.isArray(result)) {\n    extractionText = result[0].replace(/\\s+/g, \" \").trim();\n  } else if (typeof result === \"string\") {\n    extractionText = result.replace(/\\s+/g, \" \").trim();\n  } else {\n    throw new Error(\"Unexpected result format\");\n  }\n\n  const properties = fields.split(\",\").reduce((acc, field) => {\n    acc[field.trim()] = { type: \"string\" };\n    return acc;\n  }, {});\n\n  const tools = [\n    {\n      name: \"extract_fields\",\n      description: \"Extracts specified fields from the provided content.\",\n      input_schema: {\n        type: \"object\",\n        properties: {\n          entities: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties,\n            },\n          },\n        },\n        required: [\"entities\"],\n      },\n    },\n  ];\n\n  const query = `\n    ${extractionText}\n    Use the \"extract_fields\" tool.\n  `;\n\n  const anthropic = new Anthropic({ apiKey });\n\n  const response = await anthropic.beta.tools.messages.create({\n    model: \"claude-3-haiku-20240307\",\n    max_tokens: 4096,\n    messages: [{ role: \"user\", content: query }],\n    tools,\n  });\n\n  let extractedFields = null;\n  for (const content of response.content) {\n    if (content.type === \"tool_use\" && content.name === \"extract_fields\") {\n      extractedFields = content.input;\n      break;\n    }\n  }\n\n  if (extractedFields) {\n    return extractedFields.entities;\n  } else {\n    throw new Error(\"No extracted fields found in the response.\");\n  }\n}\n",
    "failCount": 1,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 38000000 },
    "usageCounter": 67
  },
  {
    "meta": {
      "name": "Claude Assistant",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      },
      "description": "Claude by Anthropic AI Assistant with tools and function calling.",
      "id": "claude-assistant-node"
    },
    "subType": "assistant",
    "_createdBy": {
      "displayName": "Save to Library",
      "timestamp": { "_seconds": 1714629264, "_nanoseconds": 342000000 }
    },
    "type": "script",
    "integrations": [],
    "live": true,
    "group": [
      {
        "uid": "anthropic",
        "name": "Anthropic",
        "description": "Nodes for interacting with and using Anthropic's Claude AI Models.",
        "id": "anthropic",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      }
    ],
    "groupInfo": "anthropic",
    "featured": true,
    "deployToBucket": {
      "ranBy": "harini@rowy.io.rowy",
      "completedAt": { "_seconds": 1714629312, "_nanoseconds": 235000000 }
    },
    "syncIndex": {
      "ranBy": "harini@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1714629320, "_nanoseconds": 497000000 }
    },
    "output": {
      "buildship": { "index": 0 },
      "description": "",
      "title": "",
      "type": "object",
      "properties": {
        "threadId": { "buildship": { "index": 4 }, "description": "", "type": "string", "title": "Thread ID" },
        "data": { "buildship": { "index": 3 }, "description": "", "title": "Data", "type": "object", "properties": {} },
        "response": { "buildship": { "index": 0 }, "description": "", "title": "Response", "type": "string" },
        "chatHistory": { "buildship": { "index": 1 }, "description": "", "type": "array", "title": "Chat History" },
        "error": { "buildship": { "index": 2 }, "description": "", "title": "Error" }
      }
    },
    "inputs": {
      "type": "object",
      "required": ["claudeApiKey", "model", "userPrompt", "systemPrompt", "maxTokens"],
      "properties": {
        "threadId": {
          "default": "",
          "buildship": { "index": 5, "sensitive": false },
          "pattern": "",
          "description": "Save and share the context of the conversation using thread ID. Note the thread ID or chat history is not natively supported on Claude and needs to be done via external database or storage. Checkout BuildShip Claude templates for examples.",
          "type": "string",
          "title": "Thread ID"
        },
        "systemPrompt": {
          "default": "",
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "Setup detailed instructions for your AI Assistant for what the goal of the assistant should be. Add guidelines for tools and function usage. Read the [docs](https://docs.buildship.com/ai-models/assistant) for more information.",
          "title": "Instructions",
          "type": "string"
        },
        "userPrompt": {
          "default": "",
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The user prompt that you want to send to the AI Assistant. This will be the incoming message from your user from the Request Body.",
          "type": "string",
          "title": "User Prompt"
        },
        "maxTokens": {
          "default": 1024,
          "buildship": { "index": 4, "sensitive": false },
          "pattern": "",
          "description": "How many maximum tokens you want the Assistant to use. Defaults to 1024 per usage. Defaults to 1024.",
          "title": "Max Tokens",
          "type": "number"
        },
        "claudeApiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The OpenAI API key to use for authentication.",
          "title": "API Key",
          "type": "string"
        },
        "model": {
          "default": "claude-3-opus-20240229",
          "buildship": {
            "options": [
              { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
              { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
              { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "Select the model you want to use for the AI Assistant. Defaults to Claude 3 Opus",
          "title": "Model",
          "type": "string",
          "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229", "claude-3-haiku-20240307"]
        }
      }
    },
    "dependencies": { "path": "0.12.7", "axios": "0.28.1", "fs": "0.0.1-security", "uuid": "9.0.1" },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716279138, "_nanoseconds": 166000000 }
    },
    "integrity": "v3:10fea2f8a92bba8062d50fde502c148a",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-assistant-node/1.1.0/build.cjs",
    "id": "claude-assistant-node",
    "version": "1.1.0",
    "_libRef": {
      "integrity": "v3:cb91442679f18543d02d5e5d1afc3f09",
      "libNodeRefId": "@buildship/claude-assistant-node",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-assistant-node/1.0.2/build.cjs",
      "version": "1.0.2"
    },
    "script": "import axios from \"axios\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from 'uuid'; \n\nconst getChatHistory = (threadId, logging) => {\n    // Load previous messages if the file exists\n    let previousMessages = [];\n    const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/claude-assistant/store/' + threadId + '.jsonl';\n    if (threadId && fs.existsSync(filePath)){\n        const fileExists = fs.existsSync(filePath, \"utf-8\");\n        if(fileExists){\n          const fileContent = fs.readFileSync(filePath,'utf8')\n          previousMessages = JSON.parse(fileContent);\n          logging.log(previousMessages)\n        }\n    }\n    return previousMessages;\n}\n\nconst appendChatHistory = (threadId, newMessages) => {\n    const filePath = process.env.BUCKET_FOLDER_PATH + '/nodes/claude-assistant/store/' + threadId + '.jsonl';\n    // Create folder path if it doesn't exist\n    const folderPath = path.dirname(filePath);\n    if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath, { recursive: true });\n    }\n    // Save userRequest and output to a JSONL file\n    const fileContent = JSON.stringify(newMessages);\n    fs.writeFileSync(filePath, fileContent);\n}\n\nconst nodeToClaudeTool: (node: Node) => ClaudeTool = (node) => {\n  return {\n    // Use node.id as the name of the tool. Spaces are not allowed.\n    name: node.id,\n    description: node.meta.description ?? \"\",\n    input_schema: {\n      type: \"object\",\n      properties: Object.entries(node.inputs.properties)\n        .reduce((properties, [name, value]) => {\n          if (value.buildship && !value.buildship.toBeAutoFilled) return properties;\n          return {\n            ...properties, [name]: {\n              type: value.type,\n              enum: value.enum,\n              description: value.description\n            }\n          }\n        }, {}),\n      required: Object.entries(node.inputs.properties).map(([name, value]) => {\n        if (value.buildship && value.buildship.toBeAutoFilled && node.inputs.required.includes(name)) return name;\n        return false;\n      }).filter(Boolean) as string[],\n    },\n  };\n}\n\ntype Params = {\n  claudeApiKey: string;\n  model: string;\n  maxTokens: number;\n  userPrompt: string;\n  systemPrompt?: string;\n  threadId?: string\n//   chatHistory?: ClaudeMessage[];\n};\n\nexport default async function assistant(\n  { claudeApiKey, model, maxTokens, userPrompt, systemPrompt, threadId }: NodeInputs,\n  { logging, execute, nodes }: NodeScriptOptions) : NodeOutput  {\n    const conversationId = threadId ? threadId : uuidv4();\n    const chatHistory = getChatHistory(conversationId, logging)\n    logging.log(chatHistory);\n\n    const version = \"2023-06-01\";\n    const beta = \"tools-2024-04-04\";\n\n  const client = axios.create({\n    baseURL: \"https://api.anthropic.com/v1\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'x-api-key': claudeApiKey,\n      'anthropic-version': version,\n      'anthropic-beta': beta\n    }\n  });\n\n  const tools: ClaudeTool[] = nodes?.map(nodeToClaudeTool) ?? [];\n\n  const initialMessages = [\n    ...(chatHistory ?? []),\n    {\n      \"role\": \"user\",\n      \"content\": userPrompt,\n    }];\n\n  const baseRequest = {\n    \"model\": model,\n    \"max_tokens\": maxTokens,\n    \"system\": systemPrompt || \"\",\n    \"tools\": tools,\n    \"messages\": initialMessages\n  } as ClaudeRequest;\n\n  try {\n    let request = { ...baseRequest };\n    let requestCount = 1;\n    logging.log(`Claude request(${requestCount}):`, baseRequest);\n    let response = await client.post(\"/messages\", request);\n    logging.log(`Claude response(${requestCount}): `, response.data);\n    do {\n      if (response.data.type === \"error\") {\n        throw response.data.error;\n      }\n\n      let result = response.data;\n\n      const isEndTurn = result.stop_reason === \"end_turn\";\n      if (isEndTurn) break;\n\n      const content = result.content;\n      request.messages.push({ role: \"assistant\", content });\n\n      const isToolUse = result.stop_reason === \"tool_use\" && content instanceof Array;\n      if (isToolUse) {\n        const toolUseMessageContent = [] as ClaudeToolResultContent[];\n\n        const toolUses: ClaudeToolUseContent[] = content.filter(content => content.type === \"tool_use\");\n        for (const toolUse of toolUses) {\n          const tool = tools.find(tool => tool.name === toolUse.name);\n          const node = nodes?.find((node: Node) => node.id === toolUse.name);\n          if (!tool || !node) {\n            logging.log(\"Failed to find tool:\");\n            logging.log(toolUse);\n            logging.log(node);\n            throw new Error(\"Failed to find tool\");\n          }\n          logging.log(\"Tool node: \", node.name);\n          // filter hallucinated inputs\n          const inputs = {} as Record<string, string>;\n          for (const [inputKey, inputValue] of Object.entries(toolUse.input)) {\n            if (node.inputs.properties[inputKey]) {\n              inputs[inputKey] = inputValue;\n            }\n          }\n          const toolResponse = await execute(node.label, inputs);\n          logging.log(\"Tool response: \", toolResponse);\n          toolUseMessageContent.push({\n            type: \"tool_result\",\n            tool_use_id: toolUse.id,\n            content: toolResponse ? JSON.stringify(toolResponse) : \"\",\n          });\n        }\n        request.messages.push({\n          role: \"user\",\n          content: toolUseMessageContent\n        });\n      }\n      requestCount++;\n      logging.log(`Claude request(${requestCount}):`, request);\n      response = await client.post(\"/messages\", request);\n      logging.log(`Claude response(${requestCount}): `, response.data);\n    } while (response && response.data && response.data.stop_reason !== \"end_turn\");\n\n    let newChatHistory =  [...request.messages, { role: \"assistant\", content: response.data.content }]\n    appendChatHistory(conversationId, newChatHistory)\n    return {\n      response: response.data.content[0].text,\n      threadId: conversationId,\n      chatHistory: newChatHistory,\n      data: response.data,\n      error: null,\n    }\n  } catch (error) {\n    logging.log(`Error: ${error}`);\n    return { error }\n  }\n}\n\ntype Node = {\n  label: string;\n  meta: {\n    id: string;\n    description: string;\n    name: string;\n    [key: string]: any;\n  };\n  inputs: {\n    type: string;\n    required: string[];\n    properties: Record<string, {\n      description: string;\n      buildship?: {\n        toBeAutoFilled?: boolean;\n        [key: string]: any;\n      }\n      [key: string]: any;\n    }>;\n  };\n  [key: string]: any;\n};\n\ntype ClaudeTool = {\n  name: string;\n  description: string;\n  input_schema: {\n    type: string;\n    properties: Record<string, {\n      type: string;\n      description: string;\n      enum?: string[];\n    }>;\n    required: string[];\n  };\n};\n\ntype ClaudeTextContent = {\n  type: \"text\";\n  text: string;\n};\n\ntype ClaudeToolUseContent = {\n  type: \"tool_use\",\n  id: string,\n  name: string,\n  input: Record<string, string>\n};\n\ntype ClaudeToolResultContent = {\n  type: \"tool_result\",\n  tool_use_id: string,\n  content: string\n};\n\ntype ClaudeMessage = {\n  role: \"user\" | \"assistant\",\n  content: ClaudeResponse[\"content\"]\n};\n\ntype ClaudeRequest = {\n  \"model\": string,\n  \"max_tokens\": number,\n  \"tools\": ClaudeTool[],\n  \"messages\": ClaudeMessage[]\n};\n\ntype ClaudeResponse = {\n  \"id\": string,\n  \"type\": \"message\",\n  \"role\": \"assistant\",\n  \"model\": string,\n  \"stop_sequence\": null,\n  \"usage\": { \"input_tokens\": number, \"output_tokens\": number },\n  \"content\": string | ClaudeTextContent[] | ClaudeToolUseContent[] | ClaudeToolResultContent[];\n  \"stop_reason\": \"tool_use\" | \"stop_sequence\" | \"end_turn\"\n};\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 43000000 },
    "usageCounter": 236,
    "failCount": 5
  },
  {
    "output": {
      "buildship": {},
      "description": "The generated text from Claude-3",
      "title": "Generated Text",
      "type": "string"
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "@anthropic-ai/sdk": "0.16.1" },
    "group": [
      {
        "uid": "anthropic",
        "name": "Anthropic",
        "description": "Nodes for interacting with and using Anthropic's Claude AI Models.",
        "id": "anthropic",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      }
    ],
    "category": ["Integrations"],
    "live": true,
    "meta": {
      "name": "Claude AI Text Generator",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      },
      "description": "Uses Claude-3 to generate text based on given prompts and system context.",
      "id": "claude-text-gen"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1709841974, "_nanoseconds": 345000000 }
    },
    "inputs": {
      "type": "object",
      "required": ["userPrompt", "apiKey", "modelId"],
      "properties": {
        "systemPrompt": {
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The system prompt describing the task for Claude-3.\n\n**SAMPLE INPUT:**\n```\nYour task is to generate personalized recipe ideas based on the user's input of available ingredients and dietary preferences. Use this information to suggest a variety of creative and delicious recipes that can be made using the given ingredients while accommodating the user's dietary needs, if any are mentioned. For each recipe, provide a brief description, a list of required ingredients, and a simple set of instructions. Ensure that the recipes are easy to follow, nutritious, and can be prepared with minimal additional ingredients or equipment.\n```",
          "title": "System Prompt",
          "type": "string"
        },
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The API key for accessing Anthropic's Claude-3 model. Get your API Key from the [ANTHROPIC Dashboard](https://console.anthropic.com/).",
          "title": "API Key",
          "type": "string"
        },
        "modelId": {
          "default": "",
          "buildship": {
            "options": [
              { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
              { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" },
              { "label": "Claude 3 Haiku", "value": "claude-3-haiku-20240307" },
              { "label": "Claude 2.1", "value": "claude-2.1" },
              { "label": "Claude 2", "value": "claude-2.0" },
              { "label": "Claude Instant 1.2", "value": "claude-instant-1.2" }
            ],
            "index": 3,
            "sensitive": false
          },
          "pattern": "",
          "description": "The Claude Family models to choose from for text generation. [Comparison Table](https://docs.anthropic.com/claude/docs/models-overview#model-comparison).",
          "title": "Model",
          "type": "string",
          "enum": [
            "claude-3-opus-20240229",
            "claude-3-sonnet-20240229",
            "claude-3-haiku-20240307",
            "claude-2.1",
            "claude-2.0",
            "claude-instant-1.2"
          ]
        },
        "userPrompt": {
          "buildship": { "index": 2, "sensitive": false },
          "pattern": "",
          "description": "The user prompt to be processed by Claude-3.\n",
          "title": "User Prompt",
          "type": "string"
        },
        "temperature": {
          "default": "0.5",
          "buildship": { "index": 5, "sensitive": false },
          "pattern": "",
          "description": "The temperature to control the randomness of the response. (Range: 0-1)",
          "title": "Temperature",
          "type": "number"
        },
        "maxTokens": {
          "default": "1024",
          "buildship": { "index": 4, "sensitive": false },
          "pattern": "",
          "description": "The maximum number of tokens to be reserved for the generated output.",
          "title": "Max Tokens",
          "type": "number"
        }
      }
    },
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1712603450, "_nanoseconds": 287000000 }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832978, "_nanoseconds": 474000000 }
    },
    "groupInfo": "anthropic",
    "integrity": "v3:8f7d040a28a1eafef18ec69767967f83",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-text-gen/1.1.0/build.cjs",
    "id": "claude-text-gen",
    "_libRef": {
      "integrity": "v3:77469fda9df2c2117710d617bdb5fa47",
      "libNodeRefId": "@buildship/claude-text-gen",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-text-gen/1.0.4/build.cjs",
      "version": "1.0.4"
    },
    "version": "1.1.0",
    "script": "import Anthropic from \"@anthropic-ai/sdk\";\n\nexport default async function generateTextWithClaude3({\n    apiKey,\n    systemPrompt,\n    userPrompt,\n    modelId,\n    maxTokens,\n    temperature\n}: NodeInputs) : NodeOutput  {\n    const anthropic = new Anthropic({\n        apiKey\n    });\n    const prompt = systemPrompt ? `${systemPrompt} - ${userPrompt}` : userPrompt;\n  \n    const response = await anthropic.messages.create({\n        model: modelId,\n        max_tokens: parseInt(maxTokens),\n        temperature: parseInt(temperature),\n        messages: [{\n            \"role\": \"user\",\n            \"content\": prompt\n        }]\n    });\n    return response.content[0].text;\n}",
    "failCount": 81,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 43000000 },
    "usageCounter": 667
  },
  {
    "output": {
      "buildship": {},
      "description": "The response from Claude AI after analyzing the image",
      "title": "Claude AI Response",
      "type": "object"
    },
    "meta": {
      "name": "Claude-3 Vision",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      },
      "description": "Uses Claude AI to answer questions related to an image and return the response.",
      "id": "claude-vision"
    },
    "type": "script",
    "integrations": [],
    "dependencies": { "@anthropic-ai/sdk": "0.16.1" },
    "group": [
      {
        "uid": "anthropic",
        "name": "Anthropic",
        "description": "Nodes for interacting with and using Anthropic's Claude AI Models.",
        "id": "anthropic",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fanthropic.png?alt=media&token=ec0eb8dc-f0d4-4f97-a144-023f1aa8118e"
      }
    ],
    "category": ["Integrations"],
    "live": true,
    "inputs": {
      "type": "object",
      "properties": {
        "apiKey": {
          "buildship": { "index": 0, "sensitive": true },
          "pattern": "",
          "description": "The API key for accessing Anthropic's Claude-3 model. Get your API Key from the [ANTHROPIC Dashboard](https://console.anthropic.com/).",
          "title": "API Key",
          "type": "string"
        },
        "modelId": {
          "default": "",
          "buildship": {
            "options": [
              { "label": "Claude 3 Opus", "value": "claude-3-opus-20240229" },
              { "label": "Claude 3 Sonnet", "value": "claude-3-sonnet-20240229" }
            ],
            "index": 4,
            "sensitive": false
          },
          "pattern": "",
          "description": "The Claude Family models to choose from for text generation. [Comparison Table](https://docs.anthropic.com/claude/docs/models-overview#model-comparison).",
          "title": "Model",
          "type": "string",
          "enum": ["claude-3-opus-20240229", "claude-3-sonnet-20240229"]
        },
        "imageUrl": {
          "buildship": { "index": 1, "sensitive": false },
          "pattern": "",
          "description": "The URL of the image for Claude AI to analyze.",
          "title": "Image URL",
          "type": "string"
        },
        "mediaType": {
          "buildship": {
            "options": [
              { "label": "image/jpeg", "value": "image/jpeg" },
              { "label": "image/png", "value": "image/png" },
              { "label": "image/gif", "value": "image/gif" },
              { "label": "image/webp", "value": "image/webp" }
            ],
            "index": 2
          },
          "description": "The media type of the image",
          "title": "Media Type",
          "type": "string",
          "enum": ["image/jpeg", "image/png", "image/gif", "image/webp"]
        },
        "prompt": {
          "default": "",
          "buildship": { "index": 3, "sensitive": false },
          "pattern": "",
          "description": "The question / prompt regarding the specified image.",
          "title": "Question",
          "type": "string"
        }
      },
      "required": ["mediaType", "apiKey", "imageUrl"]
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1709841934, "_nanoseconds": 710000000 }
    },
    "syncIndex": {
      "ranBy": "bhavya@rowy.io.rowy",
      "status": "synced",
      "completedAt": { "_seconds": 1709841935, "_nanoseconds": 52000000 }
    },
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832978, "_nanoseconds": 474000000 }
    },
    "groupInfo": "anthropic",
    "integrity": "v3:b9583f844f1705c1096adefa3d7931bb",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-vision/1.1.0/build.cjs",
    "id": "claude-vision",
    "_libRef": {
      "integrity": "v3:9d548bcf2a5505a83686f9180da30a2b",
      "libNodeRefId": "@buildship/claude-vision",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/claude-vision/1.0.2/build.cjs",
      "version": "1.0.2"
    },
    "version": "1.1.0",
    "script": "import Anthropic from \"@anthropic-ai/sdk\";\n\nexport default async function claudeAIImageAnalysis({\n  apiKey,\n  imageUrl,\n  mediaType,\n  prompt,\n  modelId\n}: NodeInputs) : NodeOutput  {\n  const anthropic = new Anthropic({\n    apiKey,\n  });\n  const imageArrayBuffer = await (await fetch(imageUrl)).arrayBuffer();\n  const imageData = Buffer.from(imageArrayBuffer).toString(\"base64\");\n  const message = await anthropic.messages.create({\n    model: modelId,\n    max_tokens: 1024,\n    messages: [\n      {\n        role: \"user\",\n        content: [\n          {\n            type: \"image\",\n            source: {\n              type: \"base64\",\n              media_type: mediaType,\n              data: imageData,\n            },\n          },\n          {\n            type: \"text\",\n            text: prompt,\n          },\n        ],\n      },\n    ],\n  });\n  return message.content[0].text;\n}\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 43000000 },
    "failCount": 22,
    "usageCounter": 294
  }
]
