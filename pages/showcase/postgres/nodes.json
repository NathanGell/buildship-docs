[
  {
    "output": {
      "buildship": {},
      "description": "The number of rows deleted",
      "type": "number",
      "title": "Deleted Row Count"
    },
    "type": "script",
    "category": ["Integrations"],
    "live": true,
    "group": [
      {
        "name": "Postgres",
        "description": "Nodes for interacting with your Postgres Database",
        "id": "0IAjU2tekQHjibkvicpK",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      }
    ],
    "meta": {
      "name": "Delete Row",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      },
      "description": "Deletes a row from a specified table in a Postgres database",
      "id": "postgres-delete-row"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701604663, "_nanoseconds": 274000000 }
    },
    "t": 173,
    "syncAllAtOnce": "992",
    "groupInfo": "0IAjU2tekQHjibkvicpK",
    "id": "postgres-delete-row",
    "integrations": [],
    "inputs": {
      "type": "object",
      "properties": {
        "password": {
          "default": "",
          "buildship": { "index": 3, "sensitive": true },
          "pattern": "",
          "description": "The password for the database",
          "title": "Password",
          "type": "string"
        },
        "database": {
          "buildship": { "index": 1 },
          "description": "The name of the database",
          "title": "Database",
          "type": "string"
        },
        "columnId": {
          "default": "",
          "buildship": { "index": 5 },
          "description": "The ID of the column to be matched and deleted",
          "type": "string",
          "title": "Column ID"
        },
        "host": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The host of the PostgreSQL database. Check out our [detailed Postgres Integration tutorial](https://docs.buildship.com/tutorials/postgres) to learn how to get these input parameters.",
          "title": "Host",
          "type": "string"
        },
        "columnValue": {
          "buildship": { "index": 6 },
          "description": "The ID of the row to be deleted",
          "title": "Column Value",
          "type": "string"
        },
        "user": {
          "buildship": { "index": 2 },
          "description": "The username for the database",
          "title": "User",
          "type": "string"
        },
        "table": {
          "buildship": { "index": 4 },
          "description": "The name of the table",
          "type": "string",
          "title": "Table"
        }
      },
      "required": ["database", "user", "table", "columnId", "columnValue", "password", "host"]
    },
    "dependencies": { "pg": "8.11.5" },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716276924, "_nanoseconds": 3000000 }
    },
    "integrity": "v3:20f892ed4670b7f631f4210fc6910e42",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-delete-row/1.1.0/build.cjs",
    "version": "1.1.0",
    "_libRef": {
      "integrity": "v3:468161565e33d337a441de832b37df6b",
      "libNodeRefId": "@buildship/postgres-delete-row",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-delete-row/1.0.0/build.cjs",
      "version": "1.0.0"
    },
    "script": "import { Client } from 'pg';\n\nexport default async function deleteRowFromPostgres({\n  host,\n  database,\n  user,\n  password,\n  table,\n  columnId,\n  columnValue,\n}: NodeInputs) : NodeOutput  {\n  const client = new Client({\n    host,\n    database,\n    user,\n    password,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\n  await client.connect();\n\n  try {\n    // Use a parameterized query with a string parameter for columnValue\n    const deleteQuery = `\n      DELETE FROM ${table}\n      WHERE ${columnId} = $1\n    `;\n\n    const res = await client.query(deleteQuery, [columnValue]);\n    return `Successfully deleted ${res.rowCount} row(s)!`;\n  } finally {\n    await client.end();\n  }\n}\n",
    "usageCounter": 26,
    "failCount": 1,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 65000000 }
  },
  {
    "output": {
      "buildship": {},
      "description": "The response from the Postgres DB",
      "type": "object",
      "title": "Postgres Response",
      "properties": { "data": { "type": "array", "key": "data" } }
    },
    "type": "script",
    "category": ["Integrations"],
    "live": true,
    "group": [
      {
        "name": "Postgres",
        "description": "Nodes for interacting with your Postgres Database",
        "id": "0IAjU2tekQHjibkvicpK",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      }
    ],
    "dependencies": { "postgres": "3.4.3" },
    "meta": {
      "name": "Fetch Table Data",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      },
      "description": "Fetch data from a Postgres DB",
      "id": "postgres-fetch-data"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701598343, "_nanoseconds": 930000000 }
    },
    "t": 167,
    "syncAllAtOnce": "1087",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 300000000 }
    },
    "groupInfo": "0IAjU2tekQHjibkvicpK",
    "id": "postgres-fetch-data",
    "integrations": [],
    "_libRef": {
      "integrity": "v3:891da5196bb7ab621d3fcb1b19df28ab",
      "libNodeRefId": "@buildship/postgres-fetch-data",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-fetch-data/1.0.1/build.cjs",
      "version": "1.0.1"
    },
    "script": "import postgres from 'postgres';\n\nexport default async function fetchTableData({\n    host,\n    database,\n    user,\n    password,\n    tableName,\n    conditionColumn,\n    conditionValue,\n}: NodeInputs) : NodeOutput  {\n    const url = `postgres://${user}:${password}@${host}/${database}`;\n    const sql = postgres(url, {\n        ssl: 'require',\n    });\n\n    let query;\n\n    if (conditionColumn && conditionValue) {\n        // Use a parameterized query to fetch data based on a condition\n        query = sql`\n      SELECT *\n      FROM ${sql(tableName)}\n      WHERE ${sql(conditionColumn)} = ${conditionValue}\n    `;\n    } else {\n        // Fetch all data if no condition is provided\n        query = sql`\n      SELECT *\n      FROM ${sql(tableName)}\n    `;\n    }\n\n    const data = await query;\n    return {\n        data\n    };\n}",
    "integrity": "v3:b3b45dc8f5a45457248435b466964919",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-fetch-data/1.1.1/build.cjs",
    "inputs": {
      "type": "object",
      "required": ["database", "user", "tableName", "password", "host"],
      "properties": {
        "database": {
          "buildship": { "index": 1 },
          "description": "The database to fetch data from",
          "title": "Database",
          "type": "string"
        },
        "password": {
          "default": "",
          "buildship": { "index": 3, "sensitive": true },
          "pattern": "",
          "description": "The password for the Postgres DB",
          "title": "Password",
          "type": "string"
        },
        "host": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The host of the PostgreSQL database. Check out our [detailed Postgres Integration tutorial](https://docs.buildship.com/tutorials/postgres) to learn how to get these input parameters.",
          "title": "Host",
          "type": "string"
        },
        "conditionValue": {
          "default": "",
          "buildship": { "index": 6, "sensitive": false },
          "pattern": "",
          "description": "The value of the condition (optional)\n\nSAMPLE INPUT: `Doberman Pinscher`",
          "title": "Condition Value",
          "type": "string"
        },
        "user": {
          "buildship": { "index": 2 },
          "description": "The user for the Postgres DB",
          "title": "User",
          "type": "string"
        },
        "conditionColumn": {
          "default": "",
          "buildship": { "index": 5, "sensitive": false },
          "pattern": "",
          "description": "The column to apply the condition on (optional)\n\nSAMPLE INPUT: `breed_name`",
          "title": "Condition Column",
          "type": "string"
        },
        "tableName": {
          "buildship": { "index": 4 },
          "description": "The table to fetch data from",
          "type": "string",
          "title": "Table Name"
        }
      }
    },
    "version": "1.1.1",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 65000000 },
    "failCount": 64,
    "usageCounter": 356
  },
  {
    "type": "script",
    "category": ["Integrations"],
    "live": true,
    "group": [
      {
        "name": "Postgres",
        "description": "Nodes for interacting with your Postgres Database",
        "id": "0IAjU2tekQHjibkvicpK",
        "iconUrl": "https://www.svgrepo.com/show/303301/postgresql-logo.svg"
      }
    ],
    "dependencies": { "postgres": "3.4.3" },
    "output": {
      "buildship": {},
      "description": "The schema of the selected table",
      "title": "Table Schema",
      "type": "array",
      "properties": {
        "data_type": { "buildship": { "index": 0 }, "title": "Data Type", "type": "string" },
        "column_name": { "buildship": { "index": 2 }, "title": "Column Name", "type": "string" },
        "character_maximum_length": { "buildship": { "index": 1 }, "title": "Maximum Length", "type": "number" }
      }
    },
    "meta": {
      "name": "Fetch Table Schema",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      },
      "description": "Fetch the schema of a specific table in a PostgreSQL database",
      "id": "postgres-fetch-table-schema"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701597290, "_nanoseconds": 789000000 }
    },
    "t": 316,
    "syncAllAtOnce": "1088",
    "_updatedBy": {
      "uid": "Nb5Sn267f6eOTgqnlB1d6Hxi5VR2",
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a-/AFdZucpItz8EJNSW_ttNzT-N4cG9IQVT5Ipuvbq7xx5Z=s96-c",
      "updatedField": "groupInfo",
      "displayName": "Bhavya Verma",
      "email": "bhavya@rowy.io.rowy",
      "timestamp": { "_seconds": 1712832980, "_nanoseconds": 300000000 }
    },
    "groupInfo": "0IAjU2tekQHjibkvicpK",
    "id": "postgres-fetch-table-schema",
    "integrations": [],
    "inputs": {
      "type": "object",
      "required": ["database", "user", "tableName", "password", "host"],
      "properties": {
        "password": {
          "default": "",
          "buildship": { "index": 3, "sensitive": true },
          "pattern": "",
          "description": "The password of the PostgreSQL database",
          "type": "string",
          "title": "Password"
        },
        "database": {
          "buildship": { "index": 1 },
          "description": "The name of the PostgreSQL database",
          "title": "Database",
          "type": "string"
        },
        "host": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The host of the PostgreSQL database. Check out our [detailed Postgres Integration tutorial](https://docs.buildship.com/tutorials/postgres) to learn how to get these input parameters.",
          "title": "Host",
          "type": "string"
        },
        "user": {
          "buildship": { "index": 2 },
          "description": "The user of the PostgreSQL database",
          "title": "User",
          "type": "string"
        },
        "tableName": {
          "buildship": { "index": 4 },
          "description": "The name of the table for which to fetch the schema",
          "type": "string",
          "title": "Table Name"
        }
      }
    },
    "integrity": "v3:44330788d0d034971fc8f4713145f535",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-fetch-table-schema/1.1.0/build.cjs",
    "_libRef": {
      "integrity": "v3:6b10b599a2c46c575c92dd8fc8be478b",
      "libNodeRefId": "@buildship/postgres-fetch-table-schema",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-fetch-table-schema/1.0.0/build.cjs",
      "version": "1.0.0"
    },
    "version": "1.1.0",
    "script": "import postgres from 'postgres';\n\nexport default async function fetchPostgresTableSchema({\n  host,\n  database,\n  user,\n  password,\n  endpointId,\n  tableName,\n}: NodeInputs) : NodeOutput  {\n  const url = `postgres://${user}:${password}@${host}/${database}`;\n  const sql = postgres(url, {\n    ssl: 'require',\n  });\n\n  // Use a parameterized query\n  const query = sql`\n    SELECT column_name, data_type, character_maximum_length\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE table_name = ${tableName}\n  `;\n\n  const res = await query;\n  return res;\n}\n",
    "failCount": 11,
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 65000000 },
    "usageCounter": 95
  },
  {
    "output": {
      "buildship": {},
      "description": "True if the data was inserted successfully, false otherwise",
      "type": "boolean",
      "title": "Insertion Success"
    },
    "type": "script",
    "category": ["Integrations"],
    "live": true,
    "group": [
      {
        "name": "Postgres",
        "description": "Nodes for interacting with your Postgres Database",
        "id": "0IAjU2tekQHjibkvicpK",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      }
    ],
    "meta": {
      "name": "Insert Data",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      },
      "description": "Inserts data into a specified table in a Postgres database securely",
      "id": "postgres-insert-data"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701599554, "_nanoseconds": 981000000 }
    },
    "t": 315,
    "syncAllAtOnce": "980",
    "groupInfo": "0IAjU2tekQHjibkvicpK",
    "id": "postgres-insert-data",
    "integrations": [],
    "inputs": {
      "type": "object",
      "properties": {
        "password": {
          "default": "",
          "buildship": { "index": 3, "sensitive": true },
          "pattern": "",
          "description": "The password for the Postgres DB",
          "type": "string",
          "title": "Password"
        },
        "database": {
          "buildship": { "index": 1 },
          "description": "The database to fetch data from",
          "title": "Database",
          "type": "string"
        },
        "data": {
          "default": [],
          "buildship": { "index": 5, "sensitive": false },
          "pattern": "",
          "description": "The data to be inserted into the table.\n\n SAMPLE DATA:\n```json\n[\n  {\n    \"breed_name\": \"Poodle\",\n    \"origin\": \"Germany\"\n  },\n  {\n    \"breed_name\": \"Beagle\",\n    \"origin\": \"United Kingdom\"\n  }\n]\n```",
          "type": "array",
          "title": "Data"
        },
        "host": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The host of the PostgreSQL database. Check out our [detailed Postgres Integration tutorial](https://docs.buildship.com/tutorials/postgres) to learn how to get these input parameters.",
          "title": "Host",
          "type": "string"
        },
        "user": {
          "buildship": { "index": 2 },
          "description": "The user for the Postgres DB",
          "title": "User",
          "type": "string"
        },
        "tableName": {
          "buildship": { "index": 4 },
          "description": "The table to fetch data from",
          "title": "Table Name",
          "type": "string"
        }
      },
      "required": ["database", "user", "tableName", "password", "data", "host"]
    },
    "dependencies": { "pg": "8.11.5" },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716276959, "_nanoseconds": 852000000 }
    },
    "integrity": "v3:2d7a26e0e3c180f2fec0025db174ae29",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-insert-data/1.1.0/build.cjs",
    "version": "1.1.0",
    "_libRef": {
      "integrity": "v3:571baf7e3a4967c71fe36f9c89b8388e",
      "libNodeRefId": "@buildship/postgres-insert-data",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-insert-data/1.0.0/build.cjs",
      "version": "1.0.0"
    },
    "script": "import { Client } from 'pg';\n\nexport default async function insertData({\n  host,\n  database,\n  user,\n  password,\n  tableName,\n  data,\n}: NodeInputs, {logging}: NodeScriptOptions) : NodeOutput  {\n  const client = new Client({\n    host,\n    database,\n    user,\n    password,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n  await client.connect();\n\n  try {\n    if (Array.isArray(data) && data.length > 0) {\n      const columns = Object.keys(data[0]); // Assuming all objects have the same structure\n\n      // Create the INSERT INTO query\n      const query = `\n        INSERT INTO ${tableName} (${columns.join(', ')})\n        VALUES\n        ${data.map((obj, i) => `(${columns.map((col) => `$${i * columns.length + columns.indexOf(col) + 1}`).join(', ')})`).join(', ')}\n      `;\n\n      const values = data.flatMap((obj) => columns.map((col) => obj[col]));\n\n      await client.query(query, values);\n      return \"Data inserted successfully!\"\n    } else {\n      logging.error('Input data is not valid.');\n      return 'Input data is not valid.';\n    }\n  } catch (error) {\n    logging.error('Error inserting data:', error);\n    return error;\n  } finally {\n    await client.end();\n  }\n}\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 65000000 },
    "usageCounter": 192,
    "failCount": 25
  },
  {
    "output": {
      "buildship": {},
      "description": "The result of the update operation",
      "type": "object",
      "title": "Update Result"
    },
    "type": "script",
    "category": ["Integrations"],
    "live": true,
    "group": [
      {
        "name": "Postgres",
        "description": "Nodes for interacting with your Postgres Database",
        "id": "0IAjU2tekQHjibkvicpK",
        "iconUrl": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      }
    ],
    "meta": {
      "name": "Update Row Data",
      "icon": {
        "type": "URL",
        "url": "https://firebasestorage.googleapis.com/v0/b/website-a1s39m.appspot.com/o/buildship-app-logos%2Fpostgresql-logo.svg?alt=media&token=1128a871-ec6d-498e-a8e8-35a7f71c1cff"
      },
      "description": "Updates a specific row in a Postgres database table securely",
      "id": "postgres-update-row"
    },
    "deployToBucket": {
      "ranBy": "bhavya@rowy.io.rowy",
      "completedAt": { "_seconds": 1701604184, "_nanoseconds": 848000000 }
    },
    "t": 378,
    "syncAllAtOnce": "1075",
    "groupInfo": "0IAjU2tekQHjibkvicpK",
    "id": "postgres-update-row",
    "integrations": [],
    "inputs": {
      "type": "object",
      "properties": {
        "password": {
          "default": "",
          "buildship": { "index": 3, "sensitive": true },
          "pattern": "",
          "description": "The password for the Postgres database user",
          "type": "string",
          "title": "Password"
        },
        "database": {
          "buildship": { "index": 1 },
          "description": "The name of the Postgres database",
          "type": "string",
          "title": "Database"
        },
        "columnId": {
          "default": "",
          "buildship": { "index": 5 },
          "description": "The ID of the column to match and update",
          "title": "Column ID",
          "type": "string"
        },
        "host": {
          "default": "",
          "buildship": { "index": 0, "sensitive": false },
          "pattern": "",
          "description": "The host of the PostgreSQL database. Check out our [detailed Postgres Integration tutorial](https://docs.buildship.com/tutorials/postgres) to learn how to get these input parameters.",
          "title": "Host",
          "type": "string"
        },
        "rowData": {
          "default": {},
          "buildship": { "index": 7, "sensitive": false },
          "pattern": "",
          "description": "The data to update the row with.\nExample Data:\n```json\n{\n  \"breed_name\": \"Siberian Husky\",\n  \"origin\": \"Russia\",\n  \"average_weight\": 50\n}\n```",
          "title": "Row Data",
          "type": "object",
          "properties": {}
        },
        "columnValue": {
          "buildship": { "index": 6 },
          "description": "The value of the column to update",
          "type": "string",
          "title": "Column Value"
        },
        "user": {
          "buildship": { "index": 2 },
          "description": "The user for the Postgres database",
          "type": "string",
          "title": "User"
        },
        "table": {
          "buildship": { "index": 4 },
          "description": "The name of the table in the database",
          "title": "Table",
          "type": "string"
        }
      },
      "required": ["database", "user", "table", "columnId", "columnValue", "rowData", "password", "host"]
    },
    "dependencies": { "pg": "8.11.5" },
    "_updatedBy": {
      "emailVerified": true,
      "photoURL": "https://lh3.googleusercontent.com/a/AAcHTtfPe0yH9QzE2iqPg4aVB_xklqimDxaI5WOsRM9XqSvD=s96-c",
      "uid": "lGcdiftmK4QNZ2XuMUVqrm6B21c2",
      "displayName": "Aaditya Bhusal",
      "email": "aaditya@rowy.io.rowy",
      "timestamp": { "_seconds": 1716276935, "_nanoseconds": 55000000 }
    },
    "integrity": "v3:bdedb8b85e36f15782bcf79255ce142b",
    "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-update-row/1.1.0/build.cjs",
    "version": "1.1.0",
    "_libRef": {
      "integrity": "v3:53de9a81a31c3496295799d4a3d6d5a3",
      "libNodeRefId": "@buildship/postgres-update-row",
      "isDirty": false,
      "libType": "public",
      "src": "https://storage.googleapis.com/buildship-app-us-central1/publicLib/nodes/@buildship/postgres-update-row/1.0.0/build.cjs",
      "version": "1.0.0"
    },
    "script": "import { Client } from 'pg';\n\nexport default async function updatePostgresRow({\n  host,\n  database,\n  user,\n  password,\n  table,\n  columnId,\n  columnValue,\n  rowData,\n}: NodeInputs) : NodeOutput  {\n  const client = new Client({\n    host,\n    database,\n    user,\n    password,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\n  await client.connect();\n\n  try {\n    const updateColumns = Object.keys(rowData);\n    const updateValues = Object.values(rowData);\n\n    // Use parameterized query with placeholders\n    const setClause = updateColumns.map((column, index) => `${column} = $${index + 1}`).join(', ');\n\n    const updateQuery = `\n      UPDATE ${table}\n      SET ${setClause}\n      WHERE ${columnId} = $${updateValues.length + 1}\n    `;\n\n    // Append the columnValue to the updateValues array\n    updateValues.push(columnValue);\n\n    const res = await client.query(updateQuery, updateValues);\n    return res;\n  } finally {\n    await client.end();\n  }\n}\n",
    "deployedAt": { "_seconds": 1717467670, "_nanoseconds": 66000000 },
    "usageCounter": 40,
    "failCount": 17
  }
]
